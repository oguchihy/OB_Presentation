---
title: "Embedding Shiny in Quarto"
format: html
server: shiny
---

# Introduction

This is an example of embedding a Shiny app within a Quarto document.


```{r context="setup"}
library(shiny)
```

```{r}
#| context: server
  output$distPlot <- renderPlot({
    hist(rnorm(input$obs))
  })

```

```{r}
fluidPage(
  titlePanel("Hello Shiny!"),
  sidebarLayout(
    sidebarPanel(
      sliderInput("obs", "Number of observations:",
                  min = 1, max = 1000, value = 500)
    ),
    mainPanel(
      plotOutput("distPlot")
    )
  )
)

```
### Steps to Render the Document

1. **Open RStudio**: Open your Quarto project in RStudio.
2. **Switch to Source View**: Ensure you are in the Source View by clicking the "Source" tab at the top right of the editor window.
3. **Copy and Paste**: Copy the corrected content above and paste it into your `.qmd` file.
4. **Save the Document**: Save your Quarto document.
5. **Render the Document**: Render your document using the command:
    render tsttt.qmd


# Real Example

# Interactive table to explore the descriptive statistics for each variable in the dataset.

```{r setup,  echo=FALSE, warning=FALSE, message=FALSE}
library(shiny)
library(DT)
library(tableone)
library(dplyr)

# Load the data
ob_data_tbl <- readRDS("Complete Ready OB Dataset for Analytics.RDS") %>%
  dplyr::select(-adm_date, -delivery_date)

# # Create TableOne object
# table_one <- CreateTableOne(data = ob_data_tbl)

```

```{r echo=FALSE}
#| context: server
output$descTable <- DT::renderDT({
  var <- input$variable
  # Dynamically create TableOne object for the selected variable
  table_one <- CreateTableOne(data = ob_data_tbl, vars = var)
  table_one_summary <- print(table_one, test = FALSE, quote = FALSE, noSpaces = TRUE)
  datatable(as.data.frame(table_one_summary), options = list(pageLength = 10, scrollX = TRUE))
})

```

```{r echo=FALSE }
# Define the UI layout
fluidPage(
  titlePanel("Descriptive Statistics Interactive Table"),
  sidebarLayout(
    sidebarPanel(
      selectInput("variable", "Select Variable:", choices = colnames(ob_data_tbl), selected = colnames(ob_data_tbl)[1])
    ),
    mainPanel(
      DTOutput("descTable")
    )
  )
)

```


#More

```{r}
library(shiny)
library(dplyr)
library(DT)
library(ggplot2)
library(broom)

# Load your dataset and prepare the data
ob_data_clst_xi <- readRDS("Complete Ready OB Dataset for Analytics.RDS") %>%
  dplyr::select(zip, age, grav, para, diff_grav_para, lbr_type_cnsldt, membrane_rupture, intrapartal_conditions, 
                presentation_cnsldt, conditions_cnsldt, uds_age, adm_to_del_tm_cat, hghRsk, cluster) %>%
  mutate(cluster = ifelse(cluster == 2, 1, 0))

# Function to get the mapping of original to numeric values
get_numeric_mapping <- function(df, column) {
  factor_column <- as.factor(df[[column]])
  levels_mapping <- levels(factor_column)
  numeric_values <- as.numeric(factor_column)
  mapping <- data.frame(Original = levels_mapping, Numeric = seq_along(levels_mapping), Variable = column)
  return(mapping)
}

# Apply the function to all factor variables and create a list of mappings
factor_vars <- names(ob_data_clst_xi)[sapply(ob_data_clst_xi, is.factor)]
mappings <- lapply(factor_vars, function(col) {
  if (length(unique(ob_data_clst_xi[[col]])) > 1) {  # Ensure the column has more than one unique value
    mapping_df <- get_numeric_mapping(ob_data_clst_xi, col)
    return(mapping_df)
  } else {
    return(NULL)  # Return NULL for columns with only one unique value
  }
})

# Remove NULL elements from the list
mappings <- Filter(Negate(is.null), mappings)

# Combine all mappings into a single data frame
combined_mapping_df <- do.call(rbind, mappings)

# Convert factor columns to numeric for modeling
ob_data_clst_xi <- ob_data_clst_xi %>%
  mutate(across(where(is.factor), ~ as.numeric(as.factor(.))))

```



```{r}
# Define server logic required to render outputs
#| context: server
output$factorTable <- DT::renderDT({
    req(input$selectedFactor)
  # Remove NULL elements from the list
    mappings <- Filter(Negate(is.null), mappings)

# Combine all mappings into a single data frame
   combined_mapping_df <- do.call(rbind, mappings)

    selected_mapping <- combined_mapping_df %>% filter(Variable == input$selectedFactor)
    DT::datatable(selected_mapping)
  })
  
output$coefPlot <- renderPlot({
  model <- glm(cluster ~ ., data = ob_data_clst_xi, family = binomial)
  model_tidy <- tidy(model)
  ggplot(model_tidy, aes(x = reorder(term, estimate), y = estimate)) +
    geom_point() +
    geom_errorbar(aes(ymin = estimate - std.error, ymax = estimate + std.error)) +
    coord_flip() +
    theme_minimal() +
    labs(title = "Logistic Regression Coefficients",
         x = "Predictor Variables",
         y = "Coefficient Estimate")
})



```



```{r}
# Define the UI layout
fluidPage(
  titlePanel("OB DATA Analytics"),
  sidebarLayout(
    sidebarPanel(
      selectInput("selectedFactor", "Select Factor Variable:", choices = factor_vars)
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Factor Levels", DTOutput("factorTable")),
        tabPanel("Logistic Regression", plotOutput("coefPlot"))
      )
    )
  )
)

```

