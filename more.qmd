---
title: "OB DATA Analytics"
author: 'Oguchi Nkwocha, MD., MS'
format: html
server: shiny
---

```{r}
library(shiny)
library(dplyr)
library(DT)
library(ggplot2)
library(broom)

# Load your dataset and prepare the data
ob_data_clst_xi <- readRDS("Complete Ready OB Dataset for Analytics.RDS") %>%
  dplyr::select(zip, age, grav, para, diff_grav_para, lbr_type_cnsldt, membrane_rupture, intrapartal_conditions, 
                presentation_cnsldt, conditions_cnsldt, uds_age, adm_to_del_tm_cat, hghRsk, cluster) %>%
  mutate(cluster = ifelse(cluster == 2, 1, 0))

# # Convert factor columns to numeric for modeling
# ob_data_clst_xi <- ob_data_clst_xi %>%
#   mutate(across(where(is.factor), ~ as.numeric(as.factor(.))))
# 
# # Identify factor variables
# factor_vars <<- names(ob_data_clst_xi)[sapply(ob_data_clst_xi, function(col) is.factor(as.factor(col)))]
# 
# # Function to get the mapping of original to numeric values
# get_numeric_mapping <- function(df, column) {
#   factor_column <- as.factor(df[[column]])
#   levels_mapping <- levels(factor_column)
#   numeric_values <- as.numeric(factor_column)
#   mapping <- data.frame(Original = levels_mapping, Numeric = seq_along(levels_mapping), Variable = column)
#   return(mapping)
# }
# 
# # Apply the function to all factor variables and create a list of mappings
# mappings <- lapply(factor_vars, function(col) {
#   if (length(unique(ob_data_clst_xi[[col]])) > 1) {  # Ensure the column has more than one unique value
#     mapping_df <- get_numeric_mapping(ob_data_clst_xi, col)
#     return(mapping_df)
#   } else {
#     return(NULL)  # Return NULL for columns with only one unique value
#   }
# })
# 
# # Remove NULL elements from the list
# mappings <- Filter(Negate(is.null), mappings)
# 
# # Combine all mappings into a single data frame
# combined_mapping_df <<- do.call(rbind, mappings)

```

```{r}
library(dplyr)
library(DT)
# Define server logic required to render outputs
output$factorTable <- DT::renderDT({
  req(input$selectedFactor)
  # Convert factor columns to numeric for modeling
ob_data_clst_xi <- ob_data_clst_xi %>%
  mutate(across(where(is.factor), ~ as.numeric(as.factor(.))))

# Identify factor variables
factor_vars <<- names(ob_data_clst_xi)[sapply(ob_data_clst_xi, function(col) is.factor(as.factor(col)))]

# Function to get the mapping of original to numeric values
get_numeric_mapping <- function(df, column) {
  factor_column <- as.factor(df[[column]])
  levels_mapping <- levels(factor_column)
  numeric_values <- as.numeric(factor_column)
  mapping <- data.frame(Original = levels_mapping, Numeric = seq_along(levels_mapping), Variable = column)
  return(mapping)
}

# Apply the function to all factor variables and create a list of mappings
mappings <- lapply(factor_vars, function(col) {
  if (length(unique(ob_data_clst_xi[[col]])) > 1) {  # Ensure the column has more than one unique value
    mapping_df <- get_numeric_mapping(ob_data_clst_xi, col)
    return(mapping_df)
  } else {
    return(NULL)  # Return NULL for columns with only one unique value
  }
})

# Remove NULL elements from the list
mappings <- Filter(Negate(is.null), mappings)

# Combine all mappings into a single data frame
combined_mapping_df <<- do.call(rbind, mappings)

  var <- input$selectedFactor
  selected_mapping <- combined_mapping_df %>% filter(Variable == var)
  DT::datatable(selected_mapping)
})

output$coefPlot <- renderPlot({
  model <- glm(cluster ~ ., data = ob_data_clst_xi, family = binomial)
  model_tidy <- tidy(model)
  ggplot(model_tidy, aes(x = reorder(term, estimate), y = estimate)) +
    geom_point() +
    geom_errorbar(aes(ymin = estimate - std.error, ymax = estimate + std.error)) +
    coord_flip() +
    theme_minimal() +
    labs(title = "Logistic Regression Coefficients",
         x = "Predictor Variables",
         y = "Coefficient Estimate")
})

```

```{r}

fluidPage(
  titlePanel("OB DATA Analytics"),
  sidebarLayout(
    sidebarPanel(
      selectInput("selectedFactor", "Select Factor Variable:", choices = factor_vars)
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Factor Levels", DTOutput("factorTable")),
        tabPanel("Logistic Regression", plotOutput("coefPlot"))
      )
    )
  )
)

```


