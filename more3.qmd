---
title: "OB DATA Analytics"
author: 'Oguchi Nkwocha, MD., MS'
format: html
server: shiny
---

```{r setup, include=FALSE}
library(shiny)
library(dplyr)
library(DT)
library(ggplot2)
library(broom)

# Load your dataset and prepare the data
ob_data_clst_xi <- readRDS("Complete Ready OB Dataset for Analytics.RDS") %>%
  dplyr::select(zip, age, grav, para, diff_grav_para, lbr_type_cnsldt, membrane_rupture, intrapartal_conditions, 
                presentation_cnsldt, conditions_cnsldt, uds_age, adm_to_del_tm_cat, hghRsk, cluster) %>%
  mutate(cluster = if_else(cluster == 2, 1, 0))
```

```{r}
#| context: server

output$selectInputUI <- renderUI({
  selectInput("selectedFactor", "Select Factor Variable:", choices = names(ob_data_clst_xi)[sapply(ob_data_clst_xi, is.factor)])
})

output$factorTable <- DT::renderDT({
  req(input$selectedFactor)
  
  local_data <- ob_data_clst_xi %>%
    mutate(across(where(is.factor), ~ as.numeric(as.factor(.))))
  
  get_numeric_mapping <- function(df, column) {
    factor_column <- as.factor(df[[column]])
    if(is.null(factor_column)) return(NULL)
    levels_mapping <- levels(factor_column)
    numeric_values <- as.numeric(factor_column)
    mapping <- data.frame(Original = levels_mapping, Numeric = numeric_values, Variable = column)
    return(mapping)
  }
  
  mappings <- lapply(names(local_data)[sapply(local_data, is.factor)], function(col) get_numeric_mapping(local_data, col))
  mappings <- Filter(Negate(is.null), mappings)
  combined_mapping_df <- do.call(rbind, mappings)
  
  if (is.null(combined_mapping_df) || nrow(combined_mapping_df) == 0) {
    return(DT::datatable(data.frame(Original = character(0), Numeric = integer(0), Variable = character(0))))
  }
  
  var <- input$selectedFactor
  selected_mapping <- dplyr::filter(combined_mapping_df, Variable == var)
  DT::datatable(selected_mapping)
})

output$coefPlot <- renderPlot({
  req(input$selectedFactor)  # Ensure plot updates on input change
  
  # Example dynamic filtering (you may adjust the filtering logic as needed)
  filtered_data <- ob_data_clst_xi %>%
    filter(get(input$selectedFactor) != "")
  
  model <- glm(cluster ~ ., data = filtered_data, family = binomial)
  model_tidy <- broom::tidy(model)
  ggplot(model_tidy, aes(x = reorder(term, estimate), y = estimate)) +
    geom_point() +
    geom_errorbar(aes(ymin = estimate - std.error, ymax = estimate + std.error)) +
    coord_flip() +
    theme_minimal() +
    labs(title = "Logistic Regression Coefficients", x = "Predictor Variables", y = "Coefficient Estimate")
})

```

```{r}
fluidPage(
  titlePanel("OB DATA Analytics"),
  sidebarLayout(
    sidebarPanel(
      uiOutput("selectInputUI")  # Dynamic UI for factor variable selection
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Factor Levels", DTOutput("factorTable")),
        tabPanel("Logistic Regression", plotOutput("coefPlot"))
      )
    )
  )
)

```

