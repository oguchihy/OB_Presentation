---
title: "Time to Event Analysis"
author: "Your Name"
date: "2024-05-27"
format: html
editor: source
server: shiny
---

```{r}
#| context: setup
library(shiny)
library(survival)
library(survminer)
library(ggplot2)
library(myRFunctions)  # Assuming this contains ggforest3
library(nnet)  # for multinom()
library(dplyr)
library(randomForest)

# Load data
ob_data_reg <- readRDS("Working OB Dataset.RDS")
ob_data_reg <- ob_data_reg %>%
  dplyr::select(zip, age, grav, para, diff_grav_para, lbr_type_cnsldt, membrane_rupture, gender, intrapartal_events, 
                event, time, presentation_cnsldt, conditions_cnsldt, uds_age, hghRsk, del_method_cnsldt, cluster) %>%
  mutate(cluster = if_else(cluster == 2, 1, 0)) %>%
  filter(zip %in% c("93905", "93906", "93927", "93930", "95012"))

# Convert adm_to_del_tm_cat to a factor
ob_data_reg <- ob_data_reg %>%
  mutate(duration_cat = case_when(
    time < 12 ~ "Under 12 hours",
    time >= 12 & time < 24 ~ "13-24 hours",
    time >= 24 & time < 48 ~ "25-48 hours",
    time >= 48 ~ "Over 48 hours"
  ))

ob_data_chr <- readRDS("Working OB Dataset.RDS")
ob_data_fctr <- readRDS("All Factored Complete Ready OB Dataset for Analytics.RDS")

ob_data_fct <- ob_data_fctr %>%
  dplyr::select(zip, age, grav, para, diff_grav_para, lbr_type_cnsldt, membrane_rupture, gender, intrapartal_events, 
                event, time, presentation_cnsldt, conditions_cnsldt, uds_age, hghRsk, del_method_cnsldt, cluster) %>%
  mutate(zip = as.character(zip)) %>%
  filter(zip %in% c("93905", "93906", "93927", "93930", "95012")) %>%
  mutate(zip = as.factor(zip), cluster = if_else(cluster == 2, 1, 0))

ob_data_fct <- ob_data_fct %>%
  mutate(duration_cat = factor(case_when(
    time < 12 ~ "Under 12 hours",
    time >= 12 & time < 24 ~ "13-24 hours",
    time >= 24 & time < 48 ~ "25-48 hours",
    time >= 48 ~ "Over 48 hours"
  )))

```

```{r}
#| panel: sidebar
selectInput("predictor", "Choose Predictor for Cox Model:", choices = colnames(ob_data_reg))
selectInput("strataVar", "Choose Stratification Variable:", choices = c("None", colnames(ob_data_reg)))
selectInput("multinomOutcome", "Choose Outcome for Multinomial Logistic Regression:", 
            choices = c("intrapartal_events", "conditions_cnsldt"))
selectInput("multinomPredictor", "Choose Predictor for Multinomial Logistic Regression:", 
            choices = colnames(ob_data_fct))
selectInput("orOutcome", "Choose Outcome for Odds Ratio Analysis:", 
            choices = c("intrapartal_events", "conditions_cnsldt"))
selectInput("orPredictor", "Choose Predictor for Odds Ratio Analysis:", 
            choices = colnames(ob_data_fct))
selectInput("varImpOutcome", "Choose Outcome for Variable Importance:", 
            choices = c("conditions_cnsldt", "cluster", "delivery_cnsldt"))
actionButton("updateModel", "Update Model")

```


```{r}
#| panel: fill
tabsetPanel(
  tabPanel("Survival Plot", plotOutput("survPlot")),
  tabPanel("Cumulative Hazard Plot", plotOutput("cumHazPlot")),
  tabPanel("Kaplan-Meier Plot", plotOutput("kmPlot")),
  tabPanel("Hazard Ratios", plotOutput("hrPlot")),
  tabPanel("Multinomial Coefficients", plotOutput("multiCoeffs")),
  tabPanel("Odds Ratios", plotOutput("orPlot")),
  tabPanel("Variable Importance", plotOutput("varImportancePlot"))
)




```

```{r}
#| context: server

ob_data_chr <- readRDS("Working OB Dataset.RDS")
ob_data_fctr <- readRDS("All Factored Complete Ready OB Dataset for Analytics.RDS")

ob_data_fct <- ob_data_fctr %>%
  dplyr::select(zip, age, grav, para, diff_grav_para, lbr_type_cnsldt, membrane_rupture, gender, intrapartal_events, 
                event, time, presentation_cnsldt, conditions_cnsldt, uds_age, hghRsk, del_method_cnsldt, cluster) %>%
  mutate(zip = as.character(zip)) %>%
  filter(zip %in% c("93905", "93906", "93927", "93930", "95012")) %>%
  mutate(zip = as.factor(zip), cluster = if_else(cluster == 2, 1, 0))

ob_data_fct <- ob_data_fct %>%
  mutate(duration_cat = factor(case_when(
    time < 12 ~ "Under 12 hours",
    time >= 12 & time < 24 ~ "13-24 hours",
    time >= 24 & time < 48 ~ "25-48 hours",
    time >= 48 ~ "Over 48 hours"
  )))


output$survPlot <- renderPlot({
  req(input$predictor)
  strata_part <- if(input$strataVar != "None") paste("+ strata(", input$strataVar, ")", sep="") else ""
  formula <- as.formula(paste("Surv(time, event) ~", input$predictor, strata_part))
  fit <- coxph(formula, data = ob_data_fct)
  surv_fit <- survfit(fit)
  plot(surv_fit, col = 1:3, main = paste("Survival Probability by", input$predictor),
       xlab = "Time", ylab = "Delivery-as-Event Probability", mark.time = TRUE)
  if (input$strataVar != "None") {
    strata_levels <- levels(factor(ob_data_fct[[input$strataVar]]))
    if (!is.null(strata_levels) && length(strata_levels) > 0) {
      legend("topright", legend = strata_levels, col = 1:length(strata_levels), lty = 1)
    }
  }
})

output$cumHazPlot <- renderPlot({
  req(input$predictor)
  strata_part <- if(input$strataVar != "None") paste("+ strata(", input$strataVar, ")", sep="") else ""
  formula <- as.formula(paste("Surv(time, event) ~", input$predictor, strata_part))
  fit <- coxph(formula, data = ob_data_fct)
  surv_fit <- survfit(fit)
  plot(surv_fit, fun = "cumhaz", col = 1:3, main = paste("Cumulative Hazard by", input$predictor),
       xlab = "Time", ylab = "Cumulative Hazard of Delivery_as_Event", mark.time = TRUE)
  if (input$strataVar != "None") {
    strata_levels <- levels(factor(ob_data_fct[[input$strataVar]]))
    if (!is.null(strata_levels) && length(strata_levels) > 0) {
      legend("topleft", legend = strata_levels, col = 1:length(strata_levels), lty = 1)
    }
  }
})

output$kmPlot <- renderPlot({
  req(input$predictor)
  strata_part <- if(input$strataVar != "None") paste("+ strata(", input$strataVar, ")", sep="") else ""
  formula <- as.formula(paste("Surv(time, event) ~", input$predictor, strata_part))
  fit <- coxph(formula, data = ob_data_fct)
  ggsurvplot(survfit(fit), data = ob_data_fct, conf.int = FALSE, risk.table = FALSE, fun = "event",
             title = paste("Kaplan-Meier Plot by", input$predictor))
})

output$hrPlot <- renderPlot({
  req(input$predictor)
  strata_part <- if(input$strataVar != "None") paste("+ strata(", input$strataVar, ")", sep="") else ""
  formula <- as.formula(paste("Surv(time, event) ~", input$predictor, strata_part))
  fit <- coxph(formula, data = ob_data_fct)
  ggforest3(fit, data = ob_data_fct, fontsize = 1.2, font.x.size = 1.0) + 
    ggtitle(paste("Hazard Ratios by", input$predictor))
})

output$multiCoeffs <- renderPlot({
  req(input$multinomOutcome, input$multinomPredictor)
  ob_data_fct_subset <- ob_data_fct %>% sample_n(500)
  formula <- as.formula(paste(input$multinomOutcome, "~", input$multinomPredictor))
  fit <- multinom(formula, data = ob_data_fct_subset, maxit = 100)
  coef_df <- data.frame(
    Predictor = rownames(coef(fit)),
    Coefficient = coef(fit)[, 1],
    StdError = summary(fit)$standard.errors[, 1]
  )
  ggplot(coef_df, aes(x = Predictor, y = Coefficient, fill = Coefficient)) +
    geom_bar(stat = "identity") +
    theme_minimal() +
    labs(title = paste("Multinomial Logistic Regression Coefficients by", input$multinomPredictor),
         y = "Coefficient Value", x = "") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
})

output$orPlot <- renderPlot({
  req(input$orOutcome, input$orPredictor)
  formula <- as.formula(paste(input$orOutcome, "~", input$orPredictor))
  fit <- glm(formula, data = ob_data_fct, family = binomial)
  or_df <- data.frame(
    Predictor = rownames(summary(fit)$coefficients),
    OR = exp(summary(fit)$coefficients[, 1]),
    Lower = exp(confint(fit)[, 1]),
    Upper = exp(confint(fit)[, 2])
  )
  ggplot(or_df, aes(x = Predictor, y = OR, ymin = Lower, ymax = Upper, color = OR)) +
    geom_pointrange() +
    theme_minimal() +
    labs(title = paste("Odds Ratios by", input$orPredictor),
         y = "Odds Ratio", x = "Predictor") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    scale_color_gradient(low = "blue", high = "red")
})

output$varImportancePlot <- renderPlot({
  req(input$varImpOutcome)
  rf_model <- randomForest(as.formula(paste(input$varImpOutcome, "~ .")), data = ob_data_fct)
  importance <- importance(rf_model)
  importance_df <- data.frame(
    Predictor = rownames(importance),
    Importance = importance[, 1]
  )
  ggplot(importance_df, aes(x = reorder(Predictor, Importance), y = Importance, fill = Importance)) +
    geom_bar(stat = "identity") +
    coord_flip() +
    labs(title = paste("Variable Importance for", input$varImpOutcome),
         x = "Predictors", y = "Importance") +
    theme_minimal() +
    theme(axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12)) +
    scale_fill_gradient(low = "blue", high = "red")
})

```

