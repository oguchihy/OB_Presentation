---
title: "OB Data Interactive Analysis with Shiny and Quarto"
author: "Oguchi Nkwocha, MD."
format: html
runtime: shiny
---


```{r setup, include=FALSE}
library(shiny)
library(ggplot2)
library(dplyr)

# Assuming your data is already loaded and named `ob_data_compact_qrto`
```


```{r echo=FALSE, message=FALSE, warning=FALSE, include=FALSE }
library(quarto)
library(tidyverse)
library(dplyr)
library(dtplyr)
library(lubridate)
library(anytime)
library(janitor)
library(ggplot2)
library(readxl)
library(readr)
library(openxlsx)
library(xlsx)
library(DataExplorer)
library(explore)
library(XICOR)
library(survival)
library(survminer)
library(klaR)
library(ggforestplot)
library(forestplot)
library(myRFunctions)
```

```{r echo= FALSE, include=FALSE}
ob_data_compact_qrto <- readRDS("ob_data_compact.RDS")
ob_hghRsk_qrto <- readRDS("High Risk OB.RDS")
dte_range_NMC_data <- range(ob_data_compact_qrto$adm_date)
del_tm_dur_range <- round(range((ob_data_compact_qrto$gest_age_days)/7),1)
age_range <- range(ob_data_compact_qrto$age)
nbr_del_nmc <- nrow(ob_data_compact_qrto)
prcnt_preterm <- round(sum(ob_data_compact_qrto$gest_age_days <259) / sum(ob_data_compact_qrto$gest_age_days >=140)*100,0)
gest_age_range <- range(ob_data_compact_qrto$gest_age_days, na.rm = TRUE)
prcnt_hghRsk <- round(sum(ob_hghRsk_qrto$hghRsk=="yes")/nrow(ob_hghRsk_qrto)*100,0)
```


```{r freq_distr, echo= FALSE, eval=FALSE}
library(shiny)
library(ggplot2)
library(dplyr)



# Define the User Interface for the Shiny App
ui <- fluidPage(
    titlePanel("Interactive Data Visualization"),
    sidebarLayout(
        sidebarPanel(
            # Dropdown menu for selecting a predictor variable
            selectInput("predictor", "Choose a Predictor:", 
                        choices = colnames(ob_data_compact_qrto)),
            # Dropdown menu for selecting an outcome variable
            selectInput("outcome", "Choose an Outcome Variable:",
                        choices = c("intrapartal_conditions", "intrapartal_events"))
        ),
        mainPanel(
            # Output: Plot
            plotOutput("dataPlot")
        )
    )
)

# Define the server logic required to draw a histogram
server <- function(input, output) {
    output$dataPlot <- renderPlot({
        # Ensure input predictor and outcome are being used correctly
        req(input$predictor, input$outcome)
        
        # Prepare the data: Filter out NAs
        data_to_plot <- ob_data_compact_qrto %>%
            filter(!is.na(.[[input$outcome]]))
        
        # Generate the plot dynamically using aes() to accommodate input strings
        ggplot(data_to_plot, aes(x = .data[[input$predictor]], fill = .data[[input$outcome]])) +
            geom_histogram(binwidth = 1, position = "dodge") +
            labs(title = paste("Distribution of", input$outcome, "by", input$predictor),
                 x = input$predictor, y = "Frequency") +
            theme(axis.text.x = element_text(angle = 45, hjust = 1))
    })
}


# Run the application 
shinyApp(ui = ui, server =server)


```



```{r, message=FALSE, warning=FALSE, echo=FALSE}
library(shiny)
library(ggplot2)
library(dplyr)
library(survival)
library(survminer)  # For ggsurvplot and survival analysis visualization
library(quarto)
library(tidyverse)
library(dplyr)
library(dtplyr)
library(lubridate)
library(anytime)
library(janitor)
library(ggplot2)
library(readxl)
library(readr)
library(openxlsx)
library(xlsx)
library(DataExplorer)
library(explore)
library(XICOR)
library(survival)
library(survminer)
library(klaR)
library(ggforestplot)
library(forestplot)
library(myRFunctions)
library(shiny)
library(nnet)        # Ensure nnet is loaded for multinom


ob_data_compact_qrto <- readRDS("ob_data_compact.RDS")
ob_hghRsk_qrto <- readRDS("High Risk OB.RDS")
ob_data_hghRsk <- readRDS("High Risk OB.RDS")
dte_range_NMC_data <- range(ob_data_compact_qrto$adm_date)
del_tm_dur_range <- round(range((ob_data_compact_qrto$gest_age_days)/7),1)
age_range <- range(ob_data_compact_qrto$age)
nbr_del_nmc <- nrow(ob_data_compact_qrto)
prcnt_preterm <- round(sum(ob_data_compact_qrto$gest_age_days <259) / sum(ob_data_compact_qrto$gest_age_days >=140)*100,0)
gest_age_range <- range(ob_data_compact_qrto$gest_age_days, na.rm = TRUE)
prcnt_hghRsk <- round(sum(ob_hghRsk_qrto$hghRsk=="yes")/nrow(ob_hghRsk_qrto)*100,0)

# Define UI
ui <- fluidPage(
    titlePanel("Advanced Statistical Analysis"),
    sidebarPanel(
        selectInput("predictorTTE", "Choose Predictors for TTE:", 
                    choices = colnames(ob_data_hghRsk), multiple = TRUE),  # Allow multiple selections
        selectInput("predictorMLR", "Choose a Predictor for MLR:", 
                    choices = colnames(ob_data_hghRsk)),
        selectInput("outcomeMLR", "Choose an Outcome Variable for MLR:",
                    choices = c("intrapartal_conditions", "intrapartal_events"))
    ),
    mainPanel(
        tabsetPanel(
            tabPanel("Multinomial Logistic Regression", plotOutput("mlrPlot")),
            tabPanel("Time to Event Analysis", plotOutput("ttePlot"))
        )
    )
)


server <- function(input, output) {
    output$ttePlot <- renderPlot({
        req(input$predictorTTE)  # Make sure the predictor input is selected
        
        # Create the Cox model formula
        formula_tte <- as.formula(paste("Surv(adm_to_del_tm, event) ~", input$predictorTTE, "+ strata(", input$predictorTTE, ")"))
        
        # Fit the Cox model using the created formula
        fit_hghRsk_cox <- try(coxph(formula_tte, data = ob_data_hghRsk), silent = TRUE)
        
        # Check if the model fitting was successful
        if(inherits(fit_hghRsk_cox, "try-error")) {
            print("Error in fitting model:", fit_hghRsk_cox)
            return(NULL)  # Exit if the model fitting failed
        }
        
        # Generate the survival fit using the fitted Cox model
        surv_fit <- survfit(fit_hghRsk_cox)
        
        # Plot using ggsurvplot
        ggsurvplot(surv_fit, data = ob_data_hghRsk, conf.int = TRUE, risk.table = TRUE,
                   pval = TRUE, fun = "event",
                   ggtheme = theme_minimal(),
                   title = "Survival Probability",
                   xlab = "Time", ylab = "Event Probability")
    })
}

# Note: Ensure that the 'survival' and 'survminer' packages are loaded.


# Run the application
shinyApp(ui = ui, server = server)

```

