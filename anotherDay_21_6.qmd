---
title: "Time to Event Analysis"
format: html
server: shiny
---


```{r}
# Load necessary libraries
library(shiny)
library(survival)
library(survminer)
library(ggplot2)
library(myRFunctions)  # This includes ggforest3
library(nnet)  # for multinom()
library(dplyr)
library(randomForest)

# Load data
ob_data <- readRDS("Complete Ready OB Dataset for Analytics.RDS")

```

```{r}
fluidPage(
  titlePanel("Time to Event Analysis"),
  sidebarLayout(
    sidebarPanel(
      selectInput("predictor", "Choose Predictor for Cox Model:", choices = colnames(ob_data)),
      selectInput("strataVar", "Choose Stratification Variable:", choices = c("None", colnames(ob_data))),
      selectInput("predictorHR", "Choose Predictor for HR Model:", choices = colnames(ob_data)),
      selectInput("multinomOutcome", "Choose Outcome for Multinomial Logistic Regression:", 
                  choices = c("adm_to_del_tm_cat", "intrapartal_events", "conditions_cnsldt")),
      selectInput("multinomPredictor", "Choose Predictor for Multinomial Logistic Regression:", 
                  choices = colnames(ob_data)),
      selectInput("orOutcome", "Choose Outcome for Odds Ratio Analysis:", 
                  choices = c("adm_to_del_tm_cat", "intrapartal_events", "conditions_cnsldt")),
      selectInput("orPredictor", "Choose Predictor for Odds Ratio Analysis:", 
                  choices = colnames(ob_data)),
      selectInput("varImpOutcome", "Choose Outcome for Variable Importance:", 
                  choices = c("adm_to_del_tm_cat", "conditions_cnsldt", "cluster", "delivery_cnsldt")),
      actionButton("updateModel", "Update Model")
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Survival Plot", plotOutput("survPlot")),
        tabPanel("Cumulative Hazard Plot", plotOutput("cumHazPlot")),
        tabPanel("Kaplan-Meier Plot", plotOutput("kmPlot")),
        tabPanel("Hazard Ratios", plotOutput("hrPlot")),
        tabPanel("Multinomial Coefficients", plotOutput("multiCoeffs")),
        tabPanel("Odds Ratios", plotOutput("orPlot")),
        tabPanel("Variable Importance", plotOutput("varImportancePlot"))
      )
    )
  )
)

```

```{r}
#| context: server
  observeEvent(input$updateModel, {
    print(paste("Predictor for Cox Model:", input$predictor))
    print(paste("Stratification Variable:", input$strataVar))
    print(paste("Predictor for HR Model:", input$predictorHR))
    print(paste("Outcome for Multinomial Logistic Regression:", input$multinomOutcome))
    print(paste("Predictor for Multinomial Logistic Regression:", input$multinomPredictor))
    print(paste("Outcome for Odds Ratio Analysis:", input$orOutcome))
    print(paste("Predictor for Odds Ratio Analysis:", input$orPredictor))
    print(paste("Outcome for Variable Importance:", input$varImpOutcome))
  })

  # Reactive models with basic error handling
  fitModel <- reactive({
    req(input$updateModel)
    strata_part <- if(input$strataVar != "None") paste("+ strata(", input$strataVar, ")", sep="") else ""
    formula <- as.formula(paste("Surv(time, event) ~", input$predictor, strata_part))
    tryCatch({
      model <- coxph(formula, data = ob_data)
      print(summary(model))  # Debugging: Print model summary
      return(model)
    }, error = function(e) {
      print(paste("Error in fitModel:", e$message))
      NULL
    })
  })

  fitModelHR <- reactive({
    req(input$updateModel)
    formulaHR <- as.formula(paste("Surv(time, event) ~", input$predictorHR))
    tryCatch({
      modelHR <- coxph(formulaHR, data = ob_data)
      print(summary(modelHR))  # Debugging: Print model summary
      return(modelHR)
    }, error = function(e) {
      print(paste("Error in fitModelHR:", e$message))
      NULL
    })
  })

  fitMultinom <- reactive({
    req(input$updateModel)
    ob_data_subset <- ob_data %>% sample_n(500)
    formula <- as.formula(paste(input$multinomOutcome, "~", input$multinomPredictor))
    tryCatch({
      multinom_model <- multinom(formula, data = ob_data_subset, maxit = 100)
      print(summary(multinom_model))  # Debugging: Print model summary
      return(multinom_model)
    }, error = function(e) {
      print(paste("Error in fitMultinom:", e$message))
      NULL
    })
  })

  fitOR <- reactive({
    req(input$updateModel)
    formula <- as.formula(paste(input$orOutcome, "~", input$orPredictor))
    tryCatch({
      glm_model <- glm(formula, data = ob_data, family = binomial)
      print(summary(glm_model))  # Debugging: Print model summary
      return(glm_model)
    }, error = function(e) {
      print(paste("Error in fitOR:", e$message))
      NULL
    })
  })

  fitVarImp <- reactive({
    req(input$updateModel)
    tryCatch({
      rf_model <- randomForest(as.formula(paste(input$varImpOutcome, "~ .")), data = ob_data)
      importance <- importance(rf_model)
      print(importance)  # Debugging: Print variable importance
      return(importance)
    }, error = function(e) {
      print(paste("Error in fitVarImp:", e$message))
      NULL
    })
  })

  output$survPlot <- renderPlot({
    fit <- fitModel()
    req(fit)
    surv_fit <- survfit(fit)
    ggsurvplot(surv_fit, data = ob_data, ggtheme = theme_minimal(), title = paste("Survival Probability by", input$predictor))
  })

  output$cumHazPlot <- renderPlot({
    fit <- fitModel()
    req(fit)
    cumhaz_fit <- survfit(fit)
    ggsurvplot(cumhaz_fit, fun = "cumhaz", data = ob_data, ggtheme = theme_minimal(), title = paste("Cumulative Hazard by", input$predictor))
  })

  output$kmPlot <- renderPlot({
    fit <- fitModel()
    req(fit)
    km_fit <- survfit(fit)
    ggsurvplot(km_fit, data = ob_data, ggtheme = theme_minimal(), title = paste("Kaplan-Meier Plot by", input$predictor))
  })

  output$hrPlot <- renderPlot({
    fitHR <- fitModelHR()
    req(fitHR)
    ggforest3(fitHR, data = ob_data) + ggtitle(paste("Hazard Ratios by", input$predictorHR))
  })

  output$multiCoeffs <- renderPlot({
    fit <- fitMultinom()
    req(fit)
    coef_df <- data.frame(
      Predictor = rownames(coef(fit)),
      Coefficient = coef(fit)[, 1],
      StdError = summary(fit)$standard.errors[, 1]
    )
    ggplot(coef_df, aes(x = Predictor, y = Coefficient, fill = Coefficient)) +
      geom_bar(stat = "identity") +
      theme_minimal() +
      labs(title = paste("Multinomial Logistic Regression Coefficients by", input$multinomPredictor),
           y = "Coefficient Value", x = "") +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))
  })

  output$orPlot <- renderPlot({
    fit <- fitOR()
    req(fit)
    or_df <- data.frame(
      Predictor = rownames(summary(fit)$coefficients),
      OR = exp(summary(fit)$coefficients[, 1]),
      Lower = exp(confint(fit)[, 1]),
      Upper = exp(confint(fit)[, 2])
    )
    ggplot(or_df, aes(x = Predictor, y = OR, ymin = Lower, ymax = Upper, color = OR)) +
      geom_pointrange() +
      theme_minimal() +
      labs(title = paste("Odds Ratios by", input$orPredictor),
           y = "Odds Ratio", x = "Predictor") +
      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
      scale_color_gradient(low = "blue", high = "red")
  })

  output$varImportancePlot <- renderPlot({
    importance <- fitVarImp()
    req(importance)
    importance_df <- data.frame(
      Predictor = rownames(importance),
      Importance = importance[, 1]
    )
    ggplot(importance_df, aes(x = reorder(Predictor, Importance), y = Importance, fill = Importance)) +
      geom_bar(stat = "identity") +
      coord_flip() +
      labs(title = paste("Variable Importance for", input$varImpOutcome),
           x = "Predictors", y = "Importance") +
      theme_minimal() +
      theme(axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12)) +
      scale_fill_gradient(low = "blue", high = "red")
  })

```

