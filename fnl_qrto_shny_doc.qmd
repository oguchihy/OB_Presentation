---
title: "Time to Event Analysis with Interactive Shiny App"
author: "Your Name"
date: "2024-05-13"
format: 
  html: 
    embed-resources: true
editor: visual
---

```{r setup, include=FALSE}
# Load necessary libraries
library(shiny)
library(survival)
library(survminer)
library(ggplot2)
library(myRFunctions)  # Assuming this contains ggforest3
library(nnet)  # for multinom()
```

```{r}
# Load data
ob_data <- readRDS("Factorized OB DATA with Selected Variables.RDS")

# Example static analysis
summary(ob_data)

```

```{r}
# Define UI
ui <- fluidPage(
    titlePanel("Time to Event Analysis"),
    sidebarLayout(
        sidebarPanel(
            selectInput("predictor", "Choose Predictor:", choices = colnames(ob_data)),
            selectInput("strataVar", "Choose Stratification Variable:", choices = c("None", colnames(ob_data))),
            uiOutput("multinomPredictorsUI"),
            actionButton("updateModel", "Update Model")
        ),
        mainPanel(
            tabsetPanel(
                tabPanel("Survival Plot", plotOutput("survPlot")),
                tabPanel("Cumulative Hazard Plot", plotOutput("cumHazPlot")),
                tabPanel("Kaplan-Meier Plot", plotOutput("kmPlot")),
                tabPanel("Hazard Ratios", plotOutput("hrPlot")),
                tabPanel("Multinomial Coefficients", plotOutput("multiCoeffs"))  # Updated to plotOutput for the coefficients
            )
        )
    )
)

# Define Server
server <- function(input, output, session) {
    # Dynamic UI for selecting multinomial predictors
    output$multinomPredictorsUI <- renderUI({
        checkboxGroupInput("multinomPredictors", "Choose Predictors for Multinomial Logistic Regression:", choices = colnames(ob_data))
    })
    
    fitModel <- eventReactive(input$updateModel, {
        strata_part <- if(input$strataVar != "None") paste("+ strata(", input$strataVar, ")", sep="") else ""
        formula <- as.formula(paste("Surv(adm_to_del_tm, event) ~", input$predictor, strata_part))
        model <- coxph(formula, data = ob_data)
        print(summary(model))  # Debugging model output
        return(model)
    })
    
    fitMultinom <- eventReactive(input$updateModel, {
        predictors <- paste(input$multinomPredictors, collapse = " + ")
        formula <- as.formula(paste("conditions_cnsldt ~", predictors))
        multinom_model <- multinom(formula, data = ob_data)
        print(summary(multinom_model))  # Debugging model output
        return(multinom_model)
    })
    
    output$survPlot <- renderPlot({
        fit <- fitModel()
        surv_fit <- survfit(fit)
        plot(surv_fit, fun = "event", col = 1:3, main = "Survival Probability",
             xlab = "Time", ylab = "Delivery-as-Event Probability", mark.time = TRUE)
        if (input$strataVar != "None") {
            legend("bottomright", legend = levels(ob_data[[input$strataVar]]), col = 1:3, lty = 1)
        }
    })
    
    output$cumHazPlot <- renderPlot({
        fit <- fitModel()
        surv_fit <- survfit(fit)
        plot(surv_fit, fun = "cumhaz", col = 1:3, main = "Cumulative Hazard",
             xlab = "Time", ylab = "Cumulative Hazard of Delivery_as_Event", mark.time = TRUE)
        if (input$strataVar != "None") {
            legend("topleft", legend = levels(ob_data[[input$strataVar]]), col = 1:3, lty = 1)
        }
    })
    
    output$kmPlot <- renderPlot({
        fit <- fitModel()
        ggsurvplot(survfit(fit), data = ob_data, conf.int = FALSE, risk.table = TRUE, fun = "event")
    })
    
    output$hrPlot <- renderPlot({
        fit <- fitModel()
        ggforest3(fit, data = ob_data)
    })
    
    output$multiCoeffs <- renderPlot({
        fit <- fitMultinom()
        if (is.null(fit)) {
            print("Model fitting failed.")  # Debugging statement
            return()
        }
        coef_df <- tidyMultinom(fit)
        ggplot(coef_df, aes(x = Predictor, y = Coefficient, fill = Category)) +
            geom_bar(stat = "identity", position = position_dodge()) +
            theme_minimal() +
            labs(title = "Multinomial Logistic Regression Coefficients",
                 y = "Coefficient Value", x = "") +
            theme(axis.text.x = element_text(angle = 45, hjust = 1))
    })
}

# Run the Shiny application
shinyApp(ui = ui, server = server)

```


### Explanation:
- **YAML Header**: Defines the document metadata and format.
- **Setup Chunk**: Loads the necessary libraries.
- **Introduction**: Provides a brief introduction to the analysis.
- **Static Analysis**: Includes static R code for analysis.
- **Interactive Shiny App**: Embeds the Shiny app within the document.
- **Conclusion**: Summarizes the content of the document.

### Running the Document:
To render the document, you can use the following command in the terminal or RStudio:
```sh
quarto render index.qmd


