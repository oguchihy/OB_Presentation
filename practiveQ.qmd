---
title: "Embedding Shiny in Quarto"
format: html
server: shiny
---

# Introduction

This is an example of embedding a Shiny app within a Quarto document.

```{r context="setup"}
library(shiny)
library(survival)
library(survminer)
library(ggplot2)
library(myRFunctions)  # Assuming this contains ggforest3
library(nnet)  # for multinom()
library(dplyr)  # For sample_n
library(randomForest)

# Load data
ob_data_tte <- readRDS("Complete Ready OB Dataset for Analytics.RDS")

# Helper function to convert multinomial coefficients to a tidy data frame
tidyMultinom <- function(model) {
    coefs <- coef(summary(model))
    data.frame(
        Predictor = rep(row.names(coefs), times = ncol(coefs)),
        Coefficient = as.vector(coefs),
        Category = rep(colnames(coefs), each = nrow(coefs))
    )
}


```

```{r}
#| context: server
set.seed(123)  # For reproducibility

fitModel <- eventReactive(input$updateModel, {
    strata_part <- if (input$strataVar != "None") paste("+ strata(", input$strataVar, ")", sep="") else ""
    formula <- as.formula(paste("Surv(adm_to_del_tm, event) ~", input$predictor, strata_part))
    model <- tryCatch(
        coxph(formula, data = ob_data_tte),
        error = function(e) {
            showNotification("Error in Cox model: requires single-state model setup.", type = "error")
            NULL
        }
    )
    if (!is.null(model)) print(summary(model))  # Debugging model output
    return(model)
})

fitMultinom <- eventReactive(input$updateModel, {
    # Use a smaller subset for multinomial logistic regression to simplify computation
    ob_data_tte_subset <- ob_data_tte %>% sample_n(500)  # Adjust the number as needed
    
    formula <- as.formula(paste(input$multinomOutcome, "~", input$multinomPredictor))
    multinom_model <- multinom(formula, data = ob_data_tte_subset, maxit = 100)
    print(summary(multinom_model))  # Debugging model output
    return(multinom_model)
})

fitOR <- eventReactive(input$updateModel, {
    formula <- as.formula(paste(input$orOutcome, "~", input$orPredictor))
    glm_model <- glm(formula, data = ob_data_tte, family = binomial)
    summary(glm_model)  # Debugging model output
    return(glm_model)
})

output$survPlot <- renderPlot({
    fit <- fitModel()
    if (is.null(fit)) return()
    surv_fit <- survfit(fit)
    plot(surv_fit, col = 1:3, main = paste("Survival Probability by", input$predictor),
         xlab = "Time", ylab = "Delivery-as-Event Probability", mark.time = TRUE)
    if (input$strataVar != "None") {
        legend("bottomright", legend = levels(ob_data_tte[[input$strataVar]]), col = 1:3, lty = 1)
    }
})

output$cumHazPlot <- renderPlot({
    fit <- fitModel()
    if (is.null(fit)) return()
    surv_fit <- survfit(fit)
    plot(surv_fit, fun = "cumhaz", col = 1:3, main = paste("Cumulative Hazard by", input$predictor),
         xlab = "Time", ylab = "Cumulative Hazard of Delivery_as_Event", mark.time = TRUE)
    if (input$strataVar != "None") {
        legend("topleft", legend = levels(ob_data_tte[[input$strataVar]]), col = 1:3, lty = 1)
    }
})

output$kmPlot <- renderPlot({
    fit <- fitModel()
    if (is.null(fit)) return()
    ggsurvplot(survfit(fit), data = ob_data_tte, conf.int = FALSE, risk.table = TRUE, fun = "event",
               title = paste("Kaplan-Meier Plot by", input$predictor))
})

output$hrPlot <- renderPlot({
    fit <- fitModel()
    if (is.null(fit)) return()
    ggforest3(fit, data = ob_data_tte) + ggtitle(paste("Hazard Ratios by", input$predictor))
})

output$multiCoeffs <- renderPlot({
    fit <- fitMultinom()
    if (is.null(fit)) {
        print("Model fitting failed.")  # Debugging statement
        return()
    }
    coef_df <- tidyMultinom(fit)
    ggplot(coef_df, aes(x = Predictor, y = Coefficient, fill = Category)) +
        geom_bar(stat = "identity", position = position_dodge()) +
        theme_minimal() +
        labs(title = paste("Multinomial Logistic Regression Coefficients by", input$multinomPredictor),
             y = "Coefficient Value", x = "") +
        theme(axis.text.x = element_text(angle = 45, hjust = 1))
})

output$orPlot <- renderPlot({
    fit <- fitOR()
    if (is.null(fit)) return()
    or_df <- data.frame(
        Predictor = rownames(summary(fit)$coefficients),
        OR = exp(summary(fit)$coefficients[, 1]),
        Lower = exp(confint(fit)[, 1]),
        Upper = exp(confint(fit)[, 2])
    )
    ggplot(or_df, aes(x = Predictor, y = OR, ymin = Lower, ymax = Upper, color = OR)) +
        geom_pointrange() +
        theme_minimal() +
        labs(title = paste("Odds Ratios by", input$orPredictor),
             y = "Odds Ratio", x = "Predictor") +
        theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
        scale_color_gradient(low = "blue", high = "red")
})

output$varImportancePlot <- renderPlot({
    data_for_rf <- ob_data_tte %>%
        select(-one_of("zip", "other_high_cardinality_vars"))  # Replace with actual high-cardinality variable names

    rf_model <- randomForest(as.formula(paste(input$varImpOutcome, "~ .")), data = data_for_rf)
    importance <- importance(rf_model)
    importance_df <- data.frame(
        Predictor = rownames(importance),
        Importance = importance[, 1]
    )
    ggplot(importance_df, aes(x = reorder(Predictor, Importance), y = Importance, fill = Importance)) +
        geom_bar(stat = "identity") +
        coord_flip() +
        labs(title = paste("Variable Importance for", input$varImpOutcome),
             x = "Predictors", y = "Importance") +
        theme_minimal() +
        theme(axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12)) +
        scale_fill_gradient(low = "blue", high = "red")
})


```

```{r}
fluidPage(
    titlePanel("Time to Event Analysis"),
    sidebarLayout(
        sidebarPanel(
            selectInput("predictor", "Choose Predictor for Cox Model:", choices = colnames(ob_data_tte)),
            selectInput("strataVar", "Choose Stratification Variable:", choices = c("None", colnames(ob_data_tte))),
            selectInput("multinomOutcome", "Choose Outcome for Multinomial Logistic Regression:", 
                        choices = c("adm_to_del_tm_cat", "intrapartal_events", "conditions_cnsldt")),
            selectInput("multinomPredictor", "Choose Predictor for Multinomial Logistic Regression:", 
                        choices = colnames(ob_data_tte)),
            selectInput("orOutcome", "Choose Outcome for Odds Ratio Analysis:", 
                        choices = c("adm_to_del_tm_cat", "intrapartal_events", "conditions_cnsldt")),
            selectInput("orPredictor", "Choose Predictor for Odds Ratio Analysis:", 
                        choices = colnames(ob_data_tte)),
            selectInput("varImpOutcome", "Choose Outcome for Variable Importance:", 
                        choices = c("adm_to_del_tm_cat", "conditions_cnsldt", "cluster", "delivery_cnsldt")),
            actionButton("updateModel", "Update Model")
        ),
        mainPanel(
            tabsetPanel(
                tabPanel("Survival Plot", plotOutput("survPlot")),
                tabPanel("Cumulative Hazard Plot", plotOutput("cumHazPlot")),
                tabPanel("Kaplan-Meier Plot", plotOutput("kmPlot")),
                tabPanel("Hazard Ratios", plotOutput("hrPlot")),
                tabPanel("Multinomial Coefficients", plotOutput("multiCoeffs")),
                tabPanel("Odds Ratios", plotOutput("orPlot")),  # New tab for Odds Ratios
                tabPanel("Variable Importance", plotOutput("varImportancePlot"))  # New tab for variable importance
            )
        )
    )
)

```

