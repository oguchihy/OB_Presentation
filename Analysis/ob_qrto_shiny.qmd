# Load necessary libraries

library(shiny) library(ggplot2) library(dplyr) library(tidyr) library(readr) \# Assuming use for readRDS if necessary

# Load preprocessed data and models

mdl.ds \<- readRDS("mdl.ds.RDS") rf_model \<- readRDS("rf_model.RDS") rf_explainer \<- readRDS("rf_explainer.RDS") shap_values \<- readRDS("shap_values.RDS") X_prepared \<- readRDS("X_prepared.RDS")

# Enriching SHAP values with actual feature values

shap_long \<- as.data.frame(shap_values) %\>% mutate(observation = row_number()) %\>% pivot_longer(-observation, names_to = "feature", values_to = "shap_value")

for (feature in names(X_prepared)) { shap_long\[feature\] \<- X_prepared\[\[feature\]\]\[shap_long\$observation\] }

# Function to generate plots based on feature type

plot_shap_for_feature \<- function(feature_name, shap_data, feature_data) { feature_type \<- if (is.numeric(feature_data\[\[feature_name\]\])) "numeric" else "categorical"

plot_data \<- shap_data %\>% filter(feature == feature_name) %\>% mutate(actual_value = feature_data\[\[feature_name\]\]\[observation\])

if (feature_type == "numeric") { p \<- ggplot(plot_data, aes(x = actual_value, y = shap_value, color = shap_value)) + geom_point() + scale_color_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) + theme_minimal() + labs(title = paste("SHAP Values for", feature_name), x = feature_name, y = "SHAP Value") } else { p \<- ggplot(plot_data, aes(x = as.factor(actual_value), y = shap_value, fill = shap_value)) + geom_boxplot() + scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) + theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + labs(title = paste("SHAP Values for", feature_name), x = feature_name, y = "SHAP Value") }

return(p) }

# Shiny app UI and server definitions

ui \<- fluidPage( titlePanel("Dynamic SHAP Value Visualization"), sidebarLayout( sidebarPanel(selectInput("featureSelect", "Select Feature:", choices = names(X_prepared))), mainPanel(plotOutput("featurePlot")) ) )

server \<- function(input, output) { output$featurePlot <- renderPlot({ plot_shap_for_feature(input$featureSelect, shap_long, X_prepared) }) }

shinyApp(ui = ui, server = server)
