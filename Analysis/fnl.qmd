---
title: "Dynamic SHAP Analysis with Shiny"
output:
  quarto::quarto_shiny:
    shiny_prerendered: true
---

```{r setup, include=FALSE}
# Load necessary libraries and data
library(shiny)
library(ggplot2)
library(dplyr)

# Function to plot SHAP values for a feature
plot_shap_for_feature <- function(feature_name, shap_data, feature_data) {
    # Determine if the feature is categorical or numerical
    feature_type <- if (is.numeric(feature_data[[feature_name]])) "numeric" else "categorical"
    
    # Extract relevant data for plotting
    plot_data <- shap_data %>%
        filter(feature == feature_name) %>%
        mutate(actual_value = feature_data[[feature_name]][observation])
    
    # Generate plot based on feature type
    if (feature_type == "numeric") {
        p <- ggplot(plot_data, aes(x = actual_value, y = value, color = value)) +
            geom_point() +
            scale_color_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
            theme_minimal() +
            labs(title = paste("SHAP Values for", feature_name), x = feature_name, y = "SHAP Value")
    } else { # For categorical features
        p <- ggplot(plot_data, aes(x = as.factor(actual_value), y = value, fill = value)) +
            geom_boxplot() +
            scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
            theme_minimal() +
            theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
            labs(title = paste("SHAP Values for", feature_name), x = feature_name, y = "SHAP Value")
    }
    
    return(p)
}

# Load prepared data and SHAP values
X_prepared <- readRDS("X_prepared.RDS")
shap_long <- readRDS("shap_long.RDS")

fluidPage(
  titlePanel("SHAP Analysis"),
  selectInput("feature", "Select Feature:", choices = c("gestational_days", "age", "city", "zip", "initial_trimester", "uds_age")),
  plotOutput("plot_output")
)


server <- function(input, output) {
  output$plot_output <- renderPlot({
    feature_name <- input$feature
    plot_shap_for_feature(feature_name, shap_long, X_prepared)
  })
}


shinyApp(ui = ui, server = server)
```