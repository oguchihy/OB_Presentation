---
title: "OB DATA Analytics"
author: "Oguchi Nkwocha, MD., MS"
format:
  html:
    page-layout: full
    code-tools: true
server: shiny
---

To learn more about Quarto see <https://quarto.org>.

```{r echo=FALSE, message=FALSE, warning=FALSE}
library(readr)
library(openxlsx)
library(xlsx)
library(DataExplorer)
library(explore)
library(XICOR)
library(survival)
library(survminer)
library(klaR)
library(ggforestplot)
library(forestplot) 
library(myRFunctions)
library(mice)
library(readxl)
library(dplyr)
library(purrr)
library(stringr)
library(randomForest)
library(leaflet)
library(sf)
library(tableone)
library(DT)
library(kableExtra)


```


```{r echo = FALSE, comment=FALSE, message=FALSE}
ob_data_chr <- readRDS("Working OB Dataset.RDS")
ob_data_fctr <- readRDS("All Factored Complete Ready OB Dataset for Analytics.RDS")
```


# CSVS OB DATA Analytics

```{r echo = FALSE, warning=FALSE, message=FALSE}
ob_stats_block <- ob_data_chr

# Calculate days and months
library(lubridate)

# Define start and end dates
ob_data_orig <- readRDS("Base OB Data DB.RDS")
start_date <- min(ob_data_orig$adm_date)
end_date <- max(ob_data_orig$adm_date)

# Calculate the number of days
number_of_days <- as.numeric(end_date - start_date)
#print(paste("Number of days:", number_of_days))

# Calculate the number of months
date_interval <- interval(start_date, end_date)
number_of_months <- time_length(date_interval, "months")
#print(paste("Number of months:", number_of_months))

# Other quick stats

dte_range_NMC_data <- range(ob_stats_block$adm_date)
del_tm_dur_range <- round(range((ob_stats_block$gest_age_days)/7),1)
age_range <- range(ob_stats_block$age)
nbr_del_nmc <- nrow(ob_stats_block)
prcnt_preterm <- round(sum(ob_stats_block$gest_age_days <259) / sum(ob_stats_block$gest_age_days >=140)*100,0)
gest_age_range <- range(ob_stats_block$gest_age_days, na.rm = TRUE)
prcnt_hghRsk <- round(sum(ob_stats_block$hghRsk=="yes")/nrow(ob_stats_block)*100,0)
mltpl_gest <- sum(ob_data_chr$baby_sq>1)
mltpl_gest_prcnt <- round(mltpl_gest/nrow(ob_data_chr)*100,1)
mltpl_gest_lvls <- levels(factor(ob_data_chr$baby_sq))
gndr <- table(ob_data_chr$gender)
gndr_prcnt <- round(prop.table(gndr)*100,1)
c_section <- sum(ob_stats_block$del_method_cnsldt!="Vaginal")
c_section_prcnt <- round(c_section / nrow(ob_stats_block)*100,1)
prim_c_section <- sum(ob_stats_block$del_method_cnsldt=="Cesarean Section, Primary")
prim_c_section_prcnt <- round(prim_c_section/c_section*100, 1)

ave_daily_del <- round(nrow(ob_stats_block)/number_of_days,0)
ave_monthly_del <- round(nrow(ob_stats_block)/number_of_months,0)
```

## Overview

Between `r dte_range_NMC_data[1]` and `r dte_range_NMC_data[2]`, a period of **9 quarters** or 27 months, ***`r nbr_del_nmc`*** CSVS prenatal patients delivered at NMC, which is the principal source of data for this analysis.This included **```r gndr[1]``` females**, **```r gndr[2]``` males** and **```r gndr[3]``` unknowns** (```r gndr_prcnt[c(1:3)]``` % respectively). There were **```r mltpl_gest``` multiple gestations** --all twins -- a ```r mltpl_gest_prcnt```% incidence. 

Cesarean section rate was **```r c_section_prcnt```%**; **```r prim_c_section_prcnt```%** of the sections were **Primary**. There was **1 Fetal Demise** during the period.

In summary, the average monthly delivery for CSVS for the period was **```r ave_monthly_del```**. Each day, on the average, **```r ave_daily_del``` deliveries** occurred.

Maternal age range was between ***`r age_range[1]`*** and ***`r age_range[2]`***, with a ***median age of `r median(ob_stats_block$age)`***. (See Histogram below)

```{r echo=FALSE, warning=FALSE}
library(lattice)
histogram(~ age, data = ob_data_chr, xlab = "Age")
```

Delivery Data for our patients at NMC is kept in NMC OB Delivered Log repository; it captures the following types and categories of information relevant to our analysis:

##### **FIELDS & Names**
```{r echo = FALSE, comment=FALSE, message=FALSE}
library(knitr)
col_names_nmc <- names(ob_data_chr)
# Omit the last 9 column names
col_names_nmc <- head(col_names_nmc, -12)

# Determine the number of rows needed for three columns
n <- length(col_names_nmc)
n_rows <- ceiling(n / 3)

# Pad the column names with NA to fit the matrix
col_names_nmc <- c(col_names_nmc, rep(NA, 3 * n_rows - n))

# Create a matrix with 3 columns
col_matrix <- matrix(col_names_nmc, ncol = 3, byrow = TRUE)

# Convert the matrix to a data frame for better printing
col_df <- as.data.frame(col_matrix)

# Print the table using kable for better formatting in Quarto
kableExtra::kable(col_df, col.names = NULL, caption = "FIELDS & Names")
```

To facilitate analyses, we initially added these derived columns below:

```{r echo = FALSE, comment=FALSE, message=FALSE}
column_names <- data.frame(Column_Names = names(ob_data_chr))
derived_cols <- data.frame(column_names[(nrow(column_names) - 12):nrow(column_names), ]) 
colnames(derived_cols) =NULL
derived_cols_df <- data.frame(Derived_column = derived_cols,
                              Explanation = c("gestational age in DAYS", "Admission-to-Delivery time", "grav minus para", "Delivery", "Duration: Delivery time minus Admit time",
                           "Duration ranges", "Age ranges used by UDS", "High Risk OB by definition", "Consolidated intrapartum conditions",
                            "Consolidated labor types", "Consolidated presentation","Consolidated Delivery method" , "Clustering groups"))
kable(derived_cols_df, caption = "Derived Fields")
```

## Exploring descriptive statistics for each variable in the dataset.

```{r echo = FALSE, comment=FALSE, message=FALSE}
# Load necessary libraries
library(shiny)
library(tableone)
library(dplyr)
library(DT)
library(kableExtra)


ob_data_tbl1 <- readRDS("All Factored Complete Ready OB Dataset for Analytics.RDS") %>% 
  dplyr::select(-adm_date, -delivery_date) %>% 
  mutate(cluster = if_else(cluster == 2,1,0))
practiceTbl <- CreateTableOne(data = ob_data_tbl1)
vars <- setdiff(names(ob_data_chr), "gest_age")
practiceTbl_no_gest_age <- CreateTableOne(data = ob_data_tbl1, vars = vars)

#Num vars
num_var_ds <- ob_data_tbl1 %>% 
  dplyr::select_if(is.numeric) %>% 
  dplyr::select(-event, -cluster)

num_var_Tbl <- CreateTableOne(data = num_var_ds)
num_var_prn <- kableone(print(num_var_Tbl))

# Cat vars
non_num_var_ds <- ob_data_tbl1 %>%
  dplyr::select(-c(age, grav, para, weight, apg1, apg5, diff_grav_para, gest_age_days, adm_to_del_tm))
vars <- setdiff(names(non_num_var_ds), "gest_age")
non_num_var_no_gest_age <- CreateTableOne(data = non_num_var_ds, vars = vars)
cat_var_prn <- kableone(print(non_num_var_no_gest_age))
#print(practiceTbl, showAllLevels = TRUE)

# practiceTbl$CatTable
# practiceTbl$ContTable
#practiceTbl$MetaData

strata_tbl_clst <- CreateTableOne(data = ob_data_tbl1, strata = "cluster", vars = "zip")
#strt_clst_prn <- print(strata_tbl_clst, nonnormal = "cluster", cramVars = "cluster")

strata_tbl_hghRsk <- CreateTableOne(data = ob_data_tbl1, strata = "hghRsk", vars = "zip")
#strt_hghRsk_prn <- print(strata_tbl_hghRsk, nonnormal = "cluster", cramVars = "hghRsk" )

# Use Kable / KableExtra/ kableone

cat_tbl <- kableone(practiceTbl$CatTable)
#kableExtra::kable(cat_tbl, format = "html" )
#cat_tbl

cont_tbl <- kableone(practiceTbl$ContTable)
#kableExtra::kable(cont_tbl, format = "html")
#cont_tbl

strata_tbl_clst <- CreateTableOne(data = ob_data_tbl1, strata = "cluster", vars = "zip")
#print(strata_tbl_clst, nonnormal = "cluster", cramVars = "cluster" )
#kableone(print(strata_tbl_clst, nonnormal = "cluster", cramVars = "cluster" ))
#kableExtra::kable(kableone(strta_zip_clst_prn), format = "html")

strata_tbl_hghRsk <- CreateTableOne(data = ob_data_tbl1, strata = "hghRsk", vars = "zip")
#print(strata_tbl_hghRsk, nonnormal = "cluster", cramVars = "hghRsk" )
#kableone(print(strata_tbl_hghRsk, nonnormal = "cluster", cramVars = "hghRsk"))
#kableExtra::kable(kableone(strta_zip_hghRsk_prn), format = "html")

strata_tbl_clst_rsk <- CreateTableOne(data = ob_data_tbl1, strata = "hghRsk", vars = "cluster")
#print(strata_tbl_hghRsk, nonnormal = "cluster", cramVars = "hghRsk" )
#kableone(print(strata_tbl_clst_rsk, nonnormal = "hghRs", cramVars = "ghgRsk"))
#kableExtra::kable(kableone(strta_zip_hghRsk_prn), format = "html")


```

##### Let's summarize the CSVS data from NMC Delivery Log, starting with:

###### Numeric Variables
```{r, echo=FALSE, message=FALSE, warning=FALSE}
num_var_prn
```

###### Histograms
```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(dplyr)
library(ggplot2)
library(reshape2)

num_var_hist <- num_var_ds %>% 
  dplyr::select(age, grav, para, weight, apg1, apg5, diff_grav_para, gest_age_days, adm_to_del_tm) 
num_var_long <- reshape2::melt(num_var_hist, variable.name = "Variable", value.name = "Value")

# Create the faceted histogram using ggplot2
ggplot(num_var_long, aes(x = Value)) +
  geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.7) +
  facet_wrap(~ Variable, scales = "free_x", ncol = 3) +
  labs(title = "Faceted Histogram of Numerical Variables",
       x = "Value",
       y = "Frequency") +
  theme_minimal()


```

and...

Non Numeric Variables, which we will explore interactively.

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# 
# cat_var_prn
```

##### Interactive: first select variable, then Upate Table

```{r echo = FALSE, comment=FALSE, message=FALSE}
# Load necessary libraries
library(shiny)
library(tableone)
library(dplyr)

# Load your data frame
ob_data_tbl1_shny <- readRDS("All Factored Complete Ready OB Dataset for Analytics.RDS") %>% 
  dplyr::select(-c(age, grav, para, weight, apg1, apg5, diff_grav_para, gest_age_days, adm_to_del_tm, gest_age, adm_date, delivery_date, event, time, baby_sq)) %>% 
  dplyr::mutate(cluster = as.factor(if_else(cluster == 2, 1, 0)))
```

```{r}
#| panel: sidebar
selectInput("variable", "Select a Variable:", choices = names(ob_data_tbl1_shny))
actionButton("update", "Update Table")

```

```{r}
#| panel: fill
tableOutput("table_one")

```

```{r }
#| context: server
ob_data_tbl1_shny <- readRDS("All Factored Complete Ready OB Dataset for Analytics.RDS") %>% 
  dplyr::select(-c(age, grav, para, weight, apg1, apg5, diff_grav_para, gest_age_days, adm_to_del_tm, gest_age, adm_date, delivery_date, event, time, baby_sq)) %>% 
  dplyr::mutate(cluster = as.factor(if_else(cluster == 2, 1, 0)))

# Reactive expression to get the selected variable
selected_var <- reactive({
  req(input$variable)
  input$variable
})

# Reactive expression to generate the CreateTableOne object when the update button is clicked
table_one_data <- eventReactive(input$update, {
  tableone::CreateTableOne(data = ob_data_tbl1_shny, vars = selected_var())
})

# Render the table output
output$table_one <- renderTable({
  table_df <- as.data.frame(print(table_one_data(), printToggle = FALSE))
  table_df
}, rownames = TRUE)

```

Exploratory Data analyses yields rich information. However, we need to proceed with analytics so we can query the data in order to get desired information. We need to know how variables of interest affect one another, and how they compare with one another in their contribution to the results or outcome of interest to us. The outcome of interest to us in OB can be found in prenatal care (before delivery), during delivery; the event of delivery itself and right after delivery.For example, one pre-delivery outcome is pre-term (prematurity) status; another is High Risk OB status. During delivery, we are concerned about outcomes categorized by "intrapartal conditions" such as preeclampsia and also "intrapartal events" which encompass abnormal labor dynamics. Did delivery occur at all? How long was admission-time to delivery-time? What are the chances that at a given time delivery will have occurred, and what percent of patients will have delivered by a certain time? For each of these outcomes or combinations thereof, our interest is how and if variables like maternal age, zip code, parity, high risk status, affected the end-result.

A question that's natural to ask is how residential geography affects OB outcomes. We will use zipcode information (variable, "zip) and a MAP to explore this. High Risk OB is a technical definition; we can explore what contributes to it, as well as determine how it affects other outcomes as mentioned above. A fundamental method in statistical data analytics is to "dump" all the data defined by some criteria together and see if there will be a natural separation into groups, called clustering, that achieve statistical significance. If we can find clusters and relate them to known variables, we can also use this along with zip and high risk status as a probe with which to analyze outcomes.

We applied cluster statistics on the data using fetal weight against gestational age: here is our finding: 

### Cluster Analysis 

Right now, we are going to look into the important OB metrics of Gestational Age and Birth weight of our patients. We will use Cluster Analysis^[Cluster analysis is a statistical technique used to group sets of objects in such a way that objects in the same group are more similar to each other than to those in other groups. It is especially useful in medical research for identifying patterns among patients, aiding in understanding behaviors, disease progression, and treatment outcomes without predefined categories.], a useful method in medical research for identifying patterns among patients that help to characterize clinical states and associated risks and treatment outcomes without predefined categories.

Using k-means clustering algorithm with a choice of 3 clusters (arbitrary), we obtained these stats and plots:

```{r echo = FALSE, comment=FALSE, message=FALSE}
#Cluster Analysis----

#setwd(getwd())
ob_clustering <- ob_data_fctr %>% 
  dplyr::select(age, gest_age_days, weight)

ob_clustering_scaled <- scale(ob_clustering)


# Cluster Analysis
set.seed(333)

# Perform K-means clustering
k <- 3
kmeans_result <- kmeans(ob_clustering_scaled, centers = k, nstart = 25)
 
# Add the cluster assignments to the original dataset
#Remove current var cluster
ob_data_fctr$cluster <- NULL
ob_data_fctr$cluster <- as.factor(kmeans_result$cluster)
 
# Map numeric cluster IDs to meaningful names
cluster_names <- c("Term, full", "Term, early",   "Pre-term")
names(cluster_names) <- 1:3
ob_data_fctr$cluster <- factor(ob_data_fctr$cluster, levels = 1:3, labels = cluster_names)

# Now, summarizing clusters with across
cluster_summary <- ob_data_fctr %>%
    group_by(cluster) %>%
    summarise(
        across(
            .cols = c(gest_age_days, weight),
            .fns = ~ round(mean(.), 0),
            .names = "mean {.col}"
        ),
        count = n(),
        percent = round((n() / nrow(ob_data_fctr)) * 100, 1)
    )

#kable(cluster_summary, caption = "Cluster Stats")


# Plotting
library(ggplot2)

p <- ggplot(ob_data_fctr, aes(x = gest_age_days, y = weight, color = cluster)) +
    geom_point(alpha = 0.5) +
    #geom_hline(yintercept = 3000, linetype = "dashed", color = "red") +
    #geom_vline(xintercept = 259, linetype = "dashed", color = "blue") +
    theme_minimal() +
    scale_x_continuous(
        name = "Gestational Age in completed Weeks",  # Rename the x-axis to "Weeks"
        breaks = seq(0, max(ob_data_fctr$gest_age_days), by = 7),  # Set breaks every 7 days
        labels = function(x) floor(x / 7)  # Convert days to floor weeks
    ) +
    labs(title = "Cluster Analysis on Gestational Age and Birth Weights",
         x = "Gestational Age", y = "Delivery Birthweightin grams")

p

```

Can we identify this cluster grouping using known and relevant OB metrics for birth weight and gestational age categorization? Yes:


```{r echo = FALSE, comment=FALSE, message=FALSE}
# Plotting
library(ggplot2)
id_clust <- p +
geom_hline(yintercept = 3000, linetype = "dashed", color = "red") +
geom_vline(xintercept = 259, linetype = "dashed", color = "blue") 
id_clust 

```

```{r echo = FALSE, comment=FALSE, message=FALSE}
clst_smm <- cluster_summary %>% 
  data.frame()
#kable(cluster_summary, caption = "Cluster Stats")

kableExtra::kable(clst_smm, caption = "Cluster Stats", format = "html", table.attr = "class='table' style='font-size: 14px; width: auto !important;'") %>%
  kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE, position = "center", font_size = 14)

  
```


The plot shows the separation of a left lower quad (LLQ) cluster from an un-separated 2 other clusters. Further analysis shows that the LLQ cluster is statistically significantly different from either of the 2 other clusters, while this is not the case between the 2 clusters themselves. By adding the 3000 GRAM birth weight dashed horizontal line and the 37 week dashed vertical line, representing the demarcations for SGA and Preterm we find a correspondence between SGA and preterm delivery, a widely known outcome. The clusters were named after this finding, as: Pre-term; Term, early and Term, full are from 37 weeks and over. CAVEAT: Actual preterm deliveries as defined by gestational age (alone) under 37 weeks account for only **```r prcnt_preterm```%** of the deliveries, compared to the cluster group here defined by both SGA AND Preterm (**```r clst_smm[3,5]```%**); both are relatively small numbers relative to the total number of deliveries.



## High Risk OB
Let's officially define "High Risk OB", based on maternal age greater than 35, diagnosis of HTN or Preeclampsia, DM and (for CSVS) multiple gestation and or non-vertex presentation. By these criteria, **```r prcnt_hghRsk```%** are classified as High Risk.

# Service Area using Zipcode

What is CSVS OB service area? Let's now look at where our patients come from using a zipcode information (99999 represents all others);

```{r echo=FALSE, comment=FALSE, message=FALSE}
library(tableone)
library(dplyr)
library(knitr)
library(kableExtra)
library(tidyr)
library(tibble) 

# zip <- CreateTableOne(data = ob_data_tbl1,vars = "zip")
# tableone::kableone(print(zip))

# Create the table
zip <- CreateTableOne(data = ob_data_tbl1,vars = "zip")

# Convert to a clean data frame
zip_df <- as.data.frame(print(zip, printToggle = FALSE))

# Print the table to HTML
kableExtra::kable(zip_df, format = "html", caption = "Deliveries by Zip Code", table.attr = "class='table' style='font-size: 14px; width: auto !important;'") %>%
  kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE, position = "center", font_size = 14)


```

and a map of the County.


```{r echo = FALSE, comment=FALSE, message=FALSE}
library(leaflet)
library(sf)
library(dplyr)
library(RColorBrewer)

# Load spatial and data
zip_code_sf <- readRDS("CSVS service area with Zipcode and Population  with sf and shp.RDS")
ob_data_map <- readRDS("Working OB Dataset.RDS")

# Summarize data by ZIP code
ob_data_map <- ob_data_map %>%
  count(zip)

# Convert ZIP codes to character
ob_data_map$zip <- as.character(ob_data_map$zip)
zip_code_sf$ZCTA5CE20 <- as.character(zip_code_sf$ZCTA5CE20)

# Convert zip_code_sf to WGS84 datum
zip_code_sf <- st_transform(zip_code_sf, crs = 4326)

# Perform the join
ob_data_map_joined <- zip_code_sf %>%
  left_join(ob_data_map, by = c("ZCTA5CE20" = "zip"))

# Check for missing values and handle them
ob_data_map_joined$n[is.na(ob_data_map_joined$n)] <- 0

# Create a color palette function
colorPalette <- colorBin(palette = "YlOrRd", domain = ob_data_map_joined$n, bins = 5)

# Generate the leaflet map
leaflet(data = ob_data_map_joined) %>%
  addTiles() %>%
  addPolygons(
    fillColor = ~colorPalette(n),
    color = "#BDBDC3",
    fillOpacity = 0.7,
    weight = 1,
    opacity = 1,
    highlight = highlightOptions(
      weight = 3,
      color = "#666",
      fillOpacity = 0.7,
      bringToFront = TRUE
    ),
    label = ~paste("ZIP Code:", ZCTA5CE20, "<br/>Count:", n),
    labelOptions = labelOptions(
      direction = 'auto',
      noHide = FALSE,
      textOnly = TRUE
    )
  ) %>%
  addLegend(
    pal = colorPalette, 
    values = ~n, 
    opacity = 0.7, 
    title = "Count",
    position = "bottomright"
  ) %>%
  setView(lng = -121.895, lat = 36.674, zoom = 9)

```

This map shows that zipcode 93908 sitting smack within "CSVS Territory" has extremely low deliveries. Information^[(source: <https://www.unitedstateszipcodes.org/93908/>, viewed 2024-05-27)] reveals that this zipcode (Salinas - Corral De Tierra):

* has primarily white residents

* has Median Household Income	$108,093

* has Median Home Value	$616,000.


93905 with the highest deliveries, on the other hand, has "primarily other race", with a medium household income of $41,607 and Median Home Value of $203,400.^[(source: <https://www.unitedstateszipcodes.org/93908/>, viewed 2024-05-27)]


We are going to continue the analysis of our data using zip-code distribution, Clustering and high Risk oB as examples before moving to generalized analyses.

##### How does zip code affect the distribution of outcomes like Preterm (derived from cluster analysis), High Risk OB, delivery method?

```{r echo = FALSE, comment=FALSE, message=FALSE}
library(dplyr)
ob_data_tbl1 <- readRDS("All Factored Complete Ready OB Dataset for Analytics.RDS") %>% 
  dplyr::select(-adm_date, -delivery_date) %>% 
  mutate(cluster = as.factor(if_else(cluster == 2,1,0)))

strata_tbl_clst_zip <- CreateTableOne(data = ob_data_tbl1, strata = "cluster", vars = "zip")
#print(strata_tbl_clst, nonnormal = "cluster", cramVars = "cluster" )
kableone(print(strata_tbl_clst_zip, nonnormal = "cluster", cramVars = "cluster" ), caption = "Distribution of Preterm by Zip code")
#kableExtra::kable(kableone(strta_zip_clst_prn), format = "html")

strata_tbl_hghRsk_zip <- CreateTableOne(data = ob_data_tbl1, strata = "hghRsk", vars = "zip")
#print(strata_tbl_hghRsk, nonnormal = "cluster", cramVars = "hghRsk" )
kableone(print(strata_tbl_hghRsk_zip, cramVars = "hghRsk"), caption = "Distribution of High Risk OB by Zip code")
#kableExtra::kable(kableone(strta_zip_hghRsk_prn), format = "html")

strata_tbl_del_zip <- CreateTableOne(data = ob_data_tbl1, strata = "del_method_cnsldt", vars = "zip")
#print(strata_tbl_hghRsk, nonnormal = "cluster", cramVars = "hghRsk" )
kableone(print(strata_tbl_del_zip, cramVars = "del_method_cnsldt"), caption = "Distribution of Delivery Methods by Zip code")
#kableExtra::kable(kableone(strta_zip_hghRsk_prn), format = "html")

```

The answer is, there is no significant difference in distribution.

What about the High Risk OB and the outcomes of cluster & Delivery Method?

```{r echo = FALSE, comment=FALSE, message=FALSE}
strata_tbl_clst_rsk <- CreateTableOne(data = ob_data_tbl1, strata = "cluster", vars = "hghRsk")
#print(strata_tbl_hghRsk, nonnormal = "cluster", cramVars = "hghRsk" )
kableone(print(strata_tbl_clst_rsk, nonnormal = "cluster", cramVars = "hghRsk"), caption = "Distribution of Preterm by High Risk OB")
#kableExtra::kable(kableone(strta_zip_hghRsk_prn), format = "html")

strata_tbl_del_rsk <- CreateTableOne(data = ob_data_tbl1, strata = "del_method_cnsldt", vars = "hghRsk")
#print(strata_tbl_hghRsk, nonnormal = "cluster", cramVars = "hghRsk" )
kableone(print(strata_tbl_del_rsk, nonnormal = "del_method_cnsldt", cramVars = "hghRsk"), caption = "Distribution of Delivery Method by High Risk OB")
#kableExtra::kable(kableone(strta_zip_hghRsk_prn), format = "html")

```

With a p-value <0.001, a statistically significant difference is obvious in the distribution of Cesarean sections compared to Vaginal deliveries among High Risk OB.

Finally same question for Preterm and outcomes of High Risk and Delivery Method:

```{r echo = FALSE, comment=FALSE, message=FALSE}

strata_tbl_rsk_clst <- CreateTableOne(data = ob_data_tbl1, strata = "hghRsk", vars = "cluster")
#print(strata_tbl_hghRsk, nonnormal = "cluster", cramVars = "hghRsk" )
kableone(print(strata_tbl_rsk_clst, nonnormal = "cluster", cramVars = "hghRsk"), caption = "Distribution of Preterm by High Risk OB")
#kableExtra::kable(kableone(strta_zip_hghRsk_prn), format = "html")

strata_tbl_del_clst <- CreateTableOne(data = ob_data_tbl1, strata = "del_method_cnsldt", vars = "cluster")
#print(strata_tbl_hghRsk, nonnormal = "cluster", cramVars = "hghRsk" )
kableone(print(strata_tbl_del_clst, nonnormal = "cluster", cramVars = "del_method_cnsldt"), caption = "Distribution of Preterm by Delivery Method")
#kableExtra::kable(kableone(strta_zip_hghRsk_prn), format = "html")

```

Here, there is no significant difference.

#### Conclusion: The distribution of the outcome, Delivery Method, is significantly different among High Risk OB, with delivery by Cesarean Sections significantly higher in those identified as High Risk OB. The other permutations of the variables did not result in significant differences.

* We conclude that the incidence of delivery by Cesarean section is higher among High Risk OB patients when compared to vaginal delivery..



# Correlation Analysis (Spearman method)
Correlation
: Correlation is a statistical measure that describes the strength and direction of a relationship between two variables. It ranges from -1 to 1, where values close to 1 or -1 indicate strong positive or negative relationships, respectively, and values close to 0 indicate no relationship.

We have prepared an interactive table to facilate the exercise. Keep in mind that the included p-value detetmines whether there is a statistical significance or not. ***There are 15x14 pair-combinations, so, think, parsimony.***


```{r setup, include=FALSE, echo = FALSE, comment=FALSE, message=FALSE}
library(shiny)
library(XICOR)
library(dplyr)
library(ggplot2)
library(DT)

# Assuming the dataset is loaded here
ob_data_clst_xi <- readRDS("All Factored Complete Ready OB Dataset for Analytics.RDS") %>%
  dplyr::select(zip, lbr_type_cnsldt, membrane_rupture, intrapartal_conditions,
                presentation_cnsldt, conditions_cnsldt, uds_age, adm_to_del_tm_cat, hghRsk, del_method_cnsldt, cluster,
                age, grav, para, diff_grav_para) %>%
  mutate(across(c(zip, lbr_type_cnsldt, membrane_rupture, intrapartal_conditions,
                  presentation_cnsldt, conditions_cnsldt, uds_age, adm_to_del_tm_cat, hghRsk, del_method_cnsldt, cluster), as.factor)) %>%
  mutate(across(c(zip, lbr_type_cnsldt, membrane_rupture, intrapartal_conditions,
                  presentation_cnsldt, conditions_cnsldt, uds_age, adm_to_del_tm_cat, hghRsk, del_method_cnsldt, cluster), as.numeric))
```


```{r echo = FALSE, comment=FALSE, message=FALSE}
#| context: server
output$xiCorPlot <- renderPlot({
  req(input$var1, input$var2)
  if (input$var1 != input$var2) {
    spearman_result <- cor.test(ob_data_clst_xi[[input$var1]], ob_data_clst_xi[[input$var2]], method = "spearman")
    spearman_value <- spearman_result$estimate
    p_value <- spearman_result$p.value
    
    xi_data <- data.frame(Variable1 = input$var1, Variable2 = input$var2, Spearman = spearman_value, P_Value = p_value)
    
    ggplot(xi_data, aes(x = Variable1, y = Spearman, fill = Variable2)) +
      geom_col() +
      geom_text(aes(label = paste("Spearman:", round(Spearman, 2), "\nP-value:", round(P_Value, 4))), vjust = -0.5) +
      labs(title = paste("Spearman Correlation between", input$var1, "and", input$var2),
           x = "Variable Pair", y = "Spearman Correlation") +
      theme_minimal()
  } else {
    ggplot() + labs(title = "Please select two different variables")
  }
})

output$xiCorTable <- DT::renderDT({
  req(input$var1, input$var2)
  if (input$var1 != input$var2) {
    spearman_result <- cor.test(ob_data_clst_xi[[input$var1]], ob_data_clst_xi[[input$var2]], method = "spearman")
    spearman_value <- spearman_result$estimate
    p_value <- spearman_result$p.value
    
    datatable(data.frame(Variable1 = input$var1, Variable2 = input$var2, Spearman = round(spearman_value, 2), P_Value = round(p_value, 4)), options = list(pageLength = 5, scrollX = TRUE))
  } else {
    datatable(data.frame(Message = "Select different variables"), options = list(pageLength = 5, scrollX = TRUE))
  }
})


```

```{r echo = FALSE, comment=FALSE, message=FALSE}
# Define the UI layout
fluidPage(
  titlePanel("Interactive Spearman Correlation Analysis"),
  sidebarLayout(
    sidebarPanel(
      selectInput("var1", "Select the first variable:", choices = names(ob_data_clst_xi)),
      selectInput("var2", "Select the second variable:", choices = names(ob_data_clst_xi))
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Spearman Correlation Plot", plotOutput("xiCorPlot")),
        tabPanel("Spearman Correlation Table", DTOutput("xiCorTable"))
      )
    )
  )
)


```

# Hospital admission, Delivery, conditions and Events.

Let's now shift our attention to hospital events related to OB care. First, we will extend the previous analysis to hospital events. Then, we will use a different method of analysis know as Survival Analysis (SA) or by Time-to-Event (TTE) Analysis to probe our data.
The hospital events of interest are labor type, delivery method, intrapartal events and also, intrapartal conditions: 

```{r echo=FALSE, warning=FALSE, message=FALSE}
# List of factor variable names

library(dplyr)
library(tidyr)

# Assuming ob_data_tbl1 is already loaded
# ob_data_tbl1 <- readRDS("All Factored Complete Ready OB Dataset for Analytics.RDS")

# List of factor variable names
factor_vars <- c("lbr_type_cnsldt", "del_method_cnsldt", "conditions_cnsldt", "intrapartal_events")  # Replace with your actual factor variable names

# Function to get levels and create a data frame
get_levels_df <- function(var_name) {
  levels_df <- data.frame(
    Variable = var_name,
    Items = levels(ob_data_tbl1[[var_name]]),
    stringsAsFactors = FALSE
  )
  return(levels_df)
}

# Apply the function to each factor variable and combine the results
levels_list <- lapply(factor_vars, get_levels_df)
combined_levels_df <- bind_rows(levels_list)

# Group by Variable and keep only the first instance of Variable name
formatted_df <- combined_levels_df %>%
  group_by(Variable) %>%
  mutate(Variable = ifelse(row_number() == 1, Variable, "")) %>%
  ungroup()

# Print the formatted data frame
#print(formatted_df)
tableone::kableone(print(formatted_df))


```

we have consolidated some of the items within their respective variables.

Here is the distribution of deliveries by these variables:

```{r echo = FALSE, comment=FALSE, message=FALSE}
library(tableone)
library(dplyr)
library(knitr)
library(kableExtra)
library(tidyr)
library(tibble) 

ob_data_tbl1 <- readRDS("All Factored Complete Ready OB Dataset for Analytics.RDS") %>% 
  dplyr::select(-adm_date, -delivery_date) %>% 
  mutate(cluster = if_else(cluster == 2,1,0))

vars <- c("lbr_type_cnsldt", "presentation_cnsldt", "intrapartal_events", "conditions_cnsldt", "del_method_cnsldt")

# Create the table
selected_hosp <- tableone::CreateTableOne(data = ob_data_tbl1, vars = vars)


# Convert to a clean data frame
selected_hosp_df <- as.data.frame(print(selected_hosp, printToggle = FALSE))

# Move row names to a column
selected_hosp_df <- rownames_to_column(selected_hosp_df, var = "RowID")

# Identify and clean header and item rows
selected_hosp_df <- selected_hosp_df %>%
  mutate(
    Variable = ifelse(grepl("^X\\.*", RowID), "", RowID),
    Item = ifelse(grepl("^X\\.*", RowID), gsub("^X\\.*", "", RowID), ""),
    Value = Overall
  ) %>%
  dplyr::select(Variable, Item, Value) %>%
  fill(Variable, .direction = "down")

# Print the table to HTML
kableExtra::kable(selected_hosp_df, format = "html", caption = "Distribution of Hospital Variables", table.attr = "class='table' style='font-size: 12px; width: auto !important;'") %>%
  kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE, position = "left", font_size = 12)

```


#### Distribution analysis

By zip

```{r echo=FALSE, warning=FALSE, message=FALSE}
strata_tbl_lbr_zip <- CreateTableOne(data = ob_data_tbl1, strata = "lbr_type_cnsldt", vars = "zip")
kableone(print(strata_tbl_lbr_zip, cramVars = "lbr_type_cnsldt"), caption = "Distribution of Labor Types by Zip code")

strata_tbl_conditions_zip <- CreateTableOne(data = ob_data_tbl1, strata = "conditions_cnsldt", vars = "zip")
kableone(print(strata_tbl_conditions_zip, cramVars = "conditions_cnsldt"), caption = "Distribution of Intrapartal Conditions by Zip code")

strata_tbl_events_zip <- CreateTableOne(data = ob_data_tbl1, strata = "intrapartal_events", vars = "zip")
kableone(print(strata_tbl_events_zip, cramVars = "intrapartal_events"), caption = "Distribution of Intrapartal Events by Zip code")

```

By High Risk OB

```{r echo=FALSE, warning=FALSE, message=FALSE}
strata_tbl_lbr_rsk <- CreateTableOne(data = ob_data_tbl1, strata = "lbr_type_cnsldt", vars = "hghRsk")
kableone(print(strata_tbl_lbr_rsk, cramVars = "hghRsk"), caption = "Distribution of Labor Types by High Risk OB")

strata_tbl_conditions_rsk <- CreateTableOne(data = ob_data_tbl1, strata = "conditions_cnsldt", vars = "hghRsk")
kableone(print(strata_tbl_conditions_rsk, cramVars = "conditions_cnsldt"), caption = "Distribution of Intrapartal Conditions by High Risk OB")

strata_tbl_events_rsk <- CreateTableOne(data = ob_data_tbl1, strata = "intrapartal_events", vars = "hghRsk")
kableone(print(strata_tbl_events_rsk, cramVars = "intrapartal_events"), caption = "Distribution of Intrapartal Events by High Risk OB")


```

By Preterm:

```{r echo=FALSE, warning=FALSE, message=FALSE}
strata_tbl_lbr_clstr <- CreateTableOne(data = ob_data_tbl1, strata = "lbr_type_cnsldt", vars = "cluster")
kableone(print(strata_tbl_lbr_clstr, cramVars = "cluster"), caption = "Distribution of Labor Types by Preterm")

strata_tbl_conditions_clstr <- CreateTableOne(data = ob_data_tbl1, strata = "conditions_cnsldt", vars = "cluster")
kableone(print(strata_tbl_conditions_clstr, cramVars = "conditions_cnsldt"), caption = "Distribution of Intrapartal Conditions by Preterm")

strata_tbl_events_clstr <- tableone::CreateTableOne(data = ob_data_tbl1, strata = "intrapartal_events", vars = "cluster")
kableone(print(strata_tbl_events_clstr, cramVars = "intrapartal_events"), caption = "Distribution of Intrapartal Events by Preterm")


```

For this series of distribution analysis, we can conclude that High Risk OB has significant impact on the outcomes, intrapartal events and intrapartal conditions, as well as labor type.

Now, to Survival Analysis (SA) or by Time-to-Event (TTE) Analysis.

#### Survival or Time-to_Event (TTE) Analysis -- Shiny App

Survival or Time-to_Event (TTE) Analysis
: Survival analysis, or time-to-event analysis, is a statistical method used to analyze the expected duration until one or more events occur, such as death or failure. It involves the use of survival functions to estimate the probability of surviving past a certain time point. The Kaplan-Meier (KM) estimator is a non-parametric statistic used to estimate the survival function from observed survival times. Cumulative hazard (cumHaz) functions represent the accumulated risk of the event over time. Hazard ratios (HR) compare the hazard or event rates between two groups, indicating the relative likelihood of the event occurring in one group compared to another.

###### Definitions
Here's a definition of terms relevant to Survival or Time-to_Event (TTE) Analysis :

(@) Event: **Delivery**

There is an associated delivery date with time that defines the event occurrence

(@) Intervention: **Admission to the NMC**

A date-time is associated with Intervention

(@) Interval: **Duration** of time between Intervention and Event.

(@) Time: any **slice** of, or **point** , in time (not Duration) within Interval

(@) Survival: **"Survived" Event** at any given Time

In our case, this means "survived" delivery, ie., delivery has not occurred at specified Time, or, *undelivered*.

These definitions will facilitate the interpretation of our analyses when we use the popular analytic method called Survival Analysis (SA) or Time to Event (TTE) analysis.





#### COX Survival, K-M,Cumulative Hazard and Hazard Ratio

##### Cox

###### COX HR
```{r echo=FALSE, warning=FALSE, message=FALSE}



# Load necessary libraries
library(survival)
library(survminer)
library(dplyr)
library(fastDummies)

# Load your dataset
ob_data_coxph <- readRDS("All Factored Complete Ready OB Dataset for Analytics.RDS") %>%
  filter(time >= 0) %>% 
  dplyr::select(-adm_date, -delivery_date, -labor_type, -intrapartal_conditions, -delivery_method, 
                -baby_sq, -gest_age, -adm_to_del_tm, -adm_to_del_tm_cat, -presentation) %>% 
  mutate(cluster = as.factor(if_else(cluster == 2, 1, 0)))

# One-hot encode categorical variables
categorical_vars <- c("zip", "membrane_rupture", "intrapartal_events", "gender", "uds_age", "hghRsk", "conditions_cnsldt", "lbr_type_cnsldt", "presentation_cnsldt", 
                      "del_method_cnsldt", "cluster")

ob_data_encoded <- dummy_cols(ob_data_coxph, select_columns = categorical_vars, remove_first_dummy = TRUE, remove_selected_columns = TRUE)

# Ensure no negative or zero survival times
ob_data_encoded <- ob_data_encoded %>%
  filter(time > 0)

# Sanitize variable names
sanitize_names <- function(names_vector) {
  names_vector <- gsub(" ", "_", names_vector)
  names_vector <- gsub(",", "", names_vector)
  names_vector <- gsub("<", "lt", names_vector)
  names_vector <- gsub(">", "gt", names_vector)
  names_vector <- gsub("-", "_", names_vector)
  names_vector <- gsub("/", "_", names_vector) # Handle slashes
  return(names_vector)
}

# Sanitize the key variables
key_vars <- names(ob_data_encoded)[!names(ob_data_encoded) %in% c("time", "event")]
sanitized_key_vars <- sanitize_names(key_vars)

# Rename columns in the dataset to match sanitized names
names(ob_data_encoded) <- sanitize_names(names(ob_data_encoded))

saveRDS(ob_data_encoded, "OB data encoded Significant Variables for CoxPH.RDS")

# Create a formula for the Cox model
cox_formula <- as.formula(paste("Surv(time, event) ~", paste(sanitized_key_vars, collapse = " + ")))

# Fit the Cox proportional hazards model
cox_model <- coxph(cox_formula, data = ob_data_encoded)

# Summarize the model
#summary(cox_model)

# Create a forest plot for the Cox model using ggforest
ggforest(cox_model, data = ob_data_encoded)

```
####### Only significantly positive HRS

```{r echo=FALSE, warning=FALSE, message=FALSE}



# Load necessary libraries
library(survival)
library(survminer)
library(dplyr)
library(fastDummies)

# Load your dataset
ob_data_coxph <- readRDS("All Factored Complete Ready OB Dataset for Analytics.RDS") %>%
  filter(time >= 0) %>% 
  dplyr::select(-adm_date, -delivery_date, -labor_type, -intrapartal_conditions, -delivery_method, 
                -baby_sq, -gest_age, -adm_to_del_tm, -adm_to_del_tm_cat, -presentation) %>% 
  mutate(cluster = as.factor(if_else(cluster == 2, 1, 0)))

# One-hot encode categorical variables
categorical_vars <- c("zip", "membrane_rupture", "intrapartal_events", "gender", "uds_age", "hghRsk", "conditions_cnsldt", "lbr_type_cnsldt", "presentation_cnsldt", 
                      "del_method_cnsldt", "cluster")

ob_data_encoded <- dummy_cols(ob_data_coxph, select_columns = categorical_vars, remove_first_dummy = TRUE, remove_selected_columns = TRUE)

# Ensure no negative or zero survival times
ob_data_encoded <- ob_data_encoded %>%
  filter(time > 0)

# Sanitize variable names
sanitize_names <- function(names_vector) {
  names_vector <- gsub(" ", "_", names_vector)
  names_vector <- gsub(",", "", names_vector)
  names_vector <- gsub("<", "lt", names_vector)
  names_vector <- gsub(">", "gt", names_vector)
  names_vector <- gsub("-", "_", names_vector)
  names_vector <- gsub("/", "_", names_vector) # Handle slashes
  return(names_vector)
}

# Sanitize the key variables
key_vars <- names(ob_data_encoded)[!names(ob_data_encoded) %in% c("time", "event")]
sanitized_key_vars <- sanitize_names(key_vars)

# Rename columns in the dataset to match sanitized names
names(ob_data_encoded) <- sanitize_names(names(ob_data_encoded))

# Create a formula for the Cox model
cox_formula <- as.formula(paste("Surv(time, event) ~", paste(sanitized_key_vars, collapse = " + ")))

# Fit the full Cox model
cox_model_full <- coxph(cox_formula, data = ob_data_encoded)

# Summarize the full model
cox_summary <- summary(cox_model_full)

# Extract p-values from the summary
p_values <- cox_summary$coefficients[, "Pr(>|z|)"]

# Select variables with p-value < 0.05
significant_vars <- names(p_values[p_values < 0.05])

# Create a formula for the Cox model with only significant variables
cox_formula_significant <- as.formula(paste("Surv(time, event) ~", paste(significant_vars, collapse = " + ")))

# Fit the Cox model with only significant variables
cox_model_significant <- coxph(cox_formula_significant, data = ob_data_encoded)

# Summarize the significant model
#summary(cox_model_significant)

# Create a forest plot for the Cox model using ggforest
ggforest(cox_model_significant, data = ob_data_encoded)

```



###### Cox Surv, CumHaz --example

####### General: ALL variables, SA, CumHaz

```{r echo=FALSE, warning=FALSE, message=FALSE}

ob_data_coxph <- readRDS("All Factored Complete Ready OB Dataset for Analytics.RDS") %>%
  filter(time >= 0) %>% 
  dplyr::select(-adm_date, -delivery_date, -labor_type, -intrapartal_conditions, -delivery_method, 
                -baby_sq, -gest_age, -adm_to_del_tm, -adm_to_del_tm_cat, -presentation) %>% 
  mutate(cluster = as.factor(if_else(cluster == 2, 1, 0)))

# One-hot encode categorical variables
categorical_vars <- c("zip", "membrane_rupture", "intrapartal_events", "gender", "uds_age", "hghRsk", "conditions_cnsldt", "lbr_type_cnsldt", "presentation_cnsldt", 
                      "del_method_cnsldt", "cluster")

ob_data_encoded_coxph <- dummy_cols(ob_data_coxph, select_columns = categorical_vars, remove_first_dummy = TRUE, remove_selected_columns = TRUE)

# Ensure no negative or zero survival times
ob_data_encoded_coxph <- ob_data_encoded_coxph %>%
  filter(time > 0)

# Sanitize variable names
sanitize_names <- function(names_vector) {
  names_vector <- gsub(" ", "_", names_vector)
  names_vector <- gsub(",", "", names_vector)
  names_vector <- gsub("<", "lt", names_vector)
  names_vector <- gsub(">", "gt", names_vector)
  names_vector <- gsub("-", "_", names_vector)
  names_vector <- gsub("/", "_", names_vector) # Handle slashes
  return(names_vector)
}

colnames(ob_data_encoded_coxph) <- sanitize_names(colnames(ob_data_encoded_coxph))


all_vars <- names(ob_data_encoded_coxph)
all_vars <- setdiff(all_vars, c("time", "event"))
saveRDS(ob_data_encoded_coxph, "OB data encoded ALL VARIABLES for CoxPH.RDS")  

cox_model_all <- coxph(as.formula(paste("Surv(time, event) ~", paste(all_vars, collapse = " + "))), data = ob_data_encoded_coxph)

#surv_fit <- survfit(Surv(time, event) ~ data = ob_data_encoded_coxph)


surv_fit <- survfit(cox_model_all, data=ob_data_encoded)
surv_plot <- ggsurvplot(
  surv_fit,
  data = ob_data_encoded,
  #pval = TRUE,
  conf.int = TRUE,
  xlim = c(0, 100),
  surv.median.line = "hv", 
  risk.table = "abs_pct",
  break.time.by = 10,
  ggtheme = theme_minimal(),
  title = paste("Cox Survival Plot without Stratification")
  #legend.title = "ALL"
)
  
print(surv_plot)

# CumHaz
cumhaz_plot <- ggsurvplot(
  surv_fit,
  data = ob_data_encoded,
  risk.table = TRUE,
  #pval = TRUE,
  fun = "cumhaz",
  conf.int = TRUE,
  xlim = c(0, 100),
  break.time.by = 10,
  ggtheme = theme_minimal(),
  title = paste("Cox Cumulative Hazard Plot without Stratification")
  #legend.title = "ALL"
)
  
print(cumhaz_plot)


```

###### Cox Surv, CumHaz --stratified example

####### Cox with stratification

```{r echo=FALSE, warning=FALSE, message=FALSE}


library(survival)
library(survminer)

# Create the Surv object
surv_obj <- Surv(time = ob_data_encoded$time, event = ob_data_encoded$event)

# Create the Cox model using significant variables
cox_model_significant <- coxph(Surv(time, event) ~ age + apg1 + apg5 + gest_age_days + 
                               membrane_rupture_None + intrapartal_events_Precip_Labor_lt3_hrs + 
                               intrapartal_events_Prolonged_Labor_gt20_hrs + uds_age_25_44 + 
                               conditions_cnsldt_Placenta_Previa + conditions_cnsldt_Preeclampsia + 
                               conditions_cnsldt_Preeclampsia_Infection + conditions_cnsldt_Prolonged_ROM + 
                               lbr_type_cnsldt_Induced + lbr_type_cnsldt_Not_Applicable + 
                               lbr_type_cnsldt_Spontaneous, data = ob_data_encoded)

# Choose a categorical variable for stratification
strat_var <- "membrane_rupture_None"

# Add the stratification variable to the data frame
ob_data_encoded$strat_var <- ob_data_encoded[[strat_var]]

# Survival plot with stratification
surv_fit <- survfit(Surv(time, event) ~ strat_var, data = ob_data_encoded)

surv_plot <- ggsurvplot(
  surv_fit,
  data = ob_data_encoded,
  risk.table = TRUE,
  pval = TRUE,
  conf.int = TRUE,
  xlim = c(0, 100),
  break.time.by = 10,
  ggtheme = theme_minimal(),
  title = paste("Survival Plot with Stratification by", strat_var),
  legend.title = strat_var
)

# Print the survival plot
print(surv_plot)

# Cumulative hazard plot with stratification
cumhaz_plot <- ggsurvplot(
  surv_fit,
  fun = "cumhaz",
  data = ob_data_encoded,
  risk.table = TRUE,
  pval = TRUE,
  conf.int = TRUE,
  xlim = c(0, 100),
  break.time.by = 10,
  ggtheme = theme_minimal(),
  title = paste("Cumulative Hazard Plot with Stratification by", strat_var),
  legend.title = strat_var
)

# Print the cumulative hazard plot
print(cumhaz_plot)

```


###### Intrapartal Conditions consolidated

```{r echo=FALSE, warning=FALSE, message=FALSE}


ob_data_encoded <- readRDS("OB data encoded Significant Variables for CoxPH.RDS")

# Variables to use for pairwise combinations
conditions_vars <- c("conditions_cnsldt_Placenta_Previa", "conditions_cnsldt_Preeclampsia", "conditions_cnsldt_Preeclampsia_Infection", "conditions_cnsldt_Prolonged_ROM")

# Create the Surv object
surv_obj <- Surv(time = ob_data_encoded$time, event = ob_data_encoded$event)

# Create the Cox model using significant variables
cox_model_significant <- coxph(Surv(time, event) ~ age + apg1 + apg5 + gest_age_days + 
                                 membrane_rupture_None + intrapartal_events_Precip_Labor_lt3_hrs + 
                                 intrapartal_events_Prolonged_Labor_gt20_hrs + uds_age_25_44 + 
                                 conditions_cnsldt_Placenta_Previa + conditions_cnsldt_Preeclampsia + 
                                 conditions_cnsldt_Preeclampsia_Infection + conditions_cnsldt_Prolonged_ROM + 
                                 lbr_type_cnsldt_Induced + lbr_type_cnsldt_Not_Applicable + 
                                 lbr_type_cnsldt_Spontaneous, data = ob_data_encoded)

# Generate plots for presence and absence of each condition
for (var in conditions_vars) {
  # Create a binary stratification variable
  ob_data_encoded$strat_var <- factor(ifelse(ob_data_encoded[[var]] == 1, "Present", "Absent"))
  
  # Survival plot with stratification
  surv_fit <- survfit(Surv(time, event) ~ strat_var, data = ob_data_encoded)
  
  surv_plot <- ggsurvplot(
    surv_fit,
    data = ob_data_encoded,
    risk.table = TRUE,
    pval = TRUE,
    conf.int = TRUE,
    xlim = c(0, 100),
    break.time.by = 10,
    ggtheme = theme_minimal(),
    title = paste("Survival Plot with Stratification by", var),
    legend.title = var,
    legend.labs = levels(ob_data_encoded$strat_var)
  )
  
  # Print the survival plot
  print(surv_plot)
  
  # Cumulative hazard plot with stratification
  cumhaz_plot <- ggsurvplot(
    surv_fit,
    fun = "cumhaz",
    data = ob_data_encoded,
    risk.table = TRUE,
    pval = TRUE,
    conf.int = TRUE,
    xlim = c(0, 100),
    break.time.by = 10,
    ggtheme = theme_minimal(),
    title = paste("Cumulative Hazard Plot with Stratification by", var),
    legend.title = var,
    legend.labs = levels(ob_data_encoded$strat_var)
  )
  
  # Print the cumulative hazard plot
  print(cumhaz_plot)
}

```

###### Intrapartal events Consolidated

```{r echo=FALSE, warning=FALSE, message=FALSE}
ob_data_encoded <- readRDS("OB data encoded Significant Variables for CoxPH.RDS")

# Variables to use for pairwise combinations
conditions_vars <- c("intrapartal_events_Precip_Labor_lt3_hrs", "intrapartal_events_Prolonged_Labor_gt20_hrs")

# Create the Surv object
surv_obj <- Surv(time = ob_data_encoded$time, event = ob_data_encoded$event)

# Create the Cox model using significant variables
cox_model_significant <- coxph(Surv(time, event) ~ age + apg1 + apg5 + gest_age_days + 
                                 membrane_rupture_None + intrapartal_events_Precip_Labor_lt3_hrs + 
                                 intrapartal_events_Prolonged_Labor_gt20_hrs + uds_age_25_44 + 
                                 conditions_cnsldt_Placenta_Previa + conditions_cnsldt_Preeclampsia + 
                                 conditions_cnsldt_Preeclampsia_Infection + conditions_cnsldt_Prolonged_ROM + 
                                 lbr_type_cnsldt_Induced + lbr_type_cnsldt_Not_Applicable + 
                                 lbr_type_cnsldt_Spontaneous, data = ob_data_encoded)

# Generate plots for presence and absence of each condition
for (var in conditions_vars) {
  # Create a binary stratification variable
  ob_data_encoded$strat_var <- factor(ifelse(ob_data_encoded[[var]] == 1, "Present", "Absent"))
  
  # Survival plot with stratification
  surv_fit <- survfit(Surv(time, event) ~ strat_var, data = ob_data_encoded)
  
  surv_plot <- ggsurvplot(
    surv_fit,
    data = ob_data_encoded,
    risk.table = TRUE,
    pval = TRUE,
    conf.int = TRUE,
    xlim = c(0, 100),
    break.time.by = 10,
    ggtheme = theme_minimal(),
    title = paste("Survival Plot with Stratification by", var),
    legend.title = var,
    legend.labs = levels(ob_data_encoded$strat_var)
  )
  
  # Print the survival plot
  print(surv_plot)
  
  # Cumulative hazard plot with stratification
  cumhaz_plot <- ggsurvplot(
    surv_fit,
    fun = "cumhaz",
    data = ob_data_encoded,
    risk.table = TRUE,
    pval = TRUE,
    conf.int = TRUE,
    xlim = c(0, 100),
    break.time.by = 10,
    ggtheme = theme_minimal(),
    title = paste("Cumulative Hazard Plot with Stratification by", var),
    legend.title = var,
    legend.labs = levels(ob_data_encoded$strat_var)
  )
  
  # Print the cumulative hazard plot
  print(cumhaz_plot)
}

```


###### Labor Type consolidated

```{r echo=FALSE, warning=FALSE, message=FALSE}

ob_data_encoded <- readRDS("OB data encoded Significant Variables for CoxPH.RDS")

# Variables to use for pairwise combinations
conditions_vars <- c("lbr_type_cnsldt_Induced", "lbr_type_cnsldt_Not_Applicable", "lbr_type_cnsldt_Spontaneous")

# Create the Surv object
surv_obj <- Surv(time = ob_data_encoded$time, event = ob_data_encoded$event)

# Create the Cox model using significant variables
cox_model_significant <- coxph(Surv(time, event) ~ age + apg1 + apg5 + gest_age_days + 
                                 membrane_rupture_None + intrapartal_events_Precip_Labor_lt3_hrs + 
                                 intrapartal_events_Prolonged_Labor_gt20_hrs + uds_age_25_44 + 
                                 conditions_cnsldt_Placenta_Previa + conditions_cnsldt_Preeclampsia + 
                                 conditions_cnsldt_Preeclampsia_Infection + conditions_cnsldt_Prolonged_ROM + 
                                 lbr_type_cnsldt_Induced + lbr_type_cnsldt_Not_Applicable + 
                                 lbr_type_cnsldt_Spontaneous, data = ob_data_encoded)

# Generate plots for presence and absence of each condition
for (var in conditions_vars) {
  # Create a binary stratification variable
  ob_data_encoded$strat_var <- factor(ifelse(ob_data_encoded[[var]] == 1, "Present", "Absent"))
  
  # Survival plot with stratification
  surv_fit <- survfit(Surv(time, event) ~ strat_var, data = ob_data_encoded)
  
  surv_plot <- ggsurvplot(
    surv_fit,
    data = ob_data_encoded,
    risk.table = TRUE,
    pval = TRUE,
    conf.int = TRUE,
    xlim = c(0, 100),
    break.time.by = 10,
    ggtheme = theme_minimal(),
    title = paste("Survival Plot with Stratification by", var),
    legend.title = var,
    legend.labs = levels(ob_data_encoded$strat_var)
  )
  
  # Print the survival plot
  print(surv_plot)
  
  # Cumulative hazard plot with stratification
  cumhaz_plot <- ggsurvplot(
    surv_fit,
    fun = "cumhaz",
    data = ob_data_encoded,
    risk.table = TRUE,
    pval = TRUE,
    conf.int = TRUE,
    xlim = c(0, 100),
    break.time.by = 10,
    ggtheme = theme_minimal(),
    title = paste("Cumulative Hazard Plot with Stratification by", var),
    legend.title = var,
    legend.labs = levels(ob_data_encoded$strat_var)
  )
  
  # Print the cumulative hazard plot
  print(cumhaz_plot)
}

```

###### UDS Age grouping 25-44

```{r echo=FALSE, warning=FALSE, message=FALSE}

ob_data_encoded <- readRDS("OB data encoded Significant Variables for CoxPH.RDS")

# Variables to use for pairwise combinations
conditions_vars <- c("uds_age_25_44")

# Create the Surv object
surv_obj <- Surv(time = ob_data_encoded$time, event = ob_data_encoded$event)

# Create the Cox model using significant variables
cox_model_significant <- coxph(Surv(time, event) ~ age + apg1 + apg5 + gest_age_days + 
                                 membrane_rupture_None + intrapartal_events_Precip_Labor_lt3_hrs + 
                                 intrapartal_events_Prolonged_Labor_gt20_hrs + uds_age_25_44 + 
                                 conditions_cnsldt_Placenta_Previa + conditions_cnsldt_Preeclampsia + 
                                 conditions_cnsldt_Preeclampsia_Infection + conditions_cnsldt_Prolonged_ROM + 
                                 lbr_type_cnsldt_Induced + lbr_type_cnsldt_Not_Applicable + 
                                 lbr_type_cnsldt_Spontaneous, data = ob_data_encoded)

# Generate plots for presence and absence of each condition
for (var in conditions_vars) {
  # Create a binary stratification variable
  ob_data_encoded$strat_var <- factor(ifelse(ob_data_encoded[[var]] == 1, "Present", "Absent"))
  
  # Survival plot with stratification
  surv_fit <- survfit(Surv(time, event) ~ strat_var, data = ob_data_encoded)
  
  surv_plot <- ggsurvplot(
    surv_fit,
    data = ob_data_encoded,
    risk.table = TRUE,
    pval = TRUE,
    conf.int = TRUE,
    xlim = c(0, 100),
    break.time.by = 10,
    ggtheme = theme_minimal(),
    title = paste("Survival Plot with Stratification by", var),
    legend.title = var,
    legend.labs = levels(ob_data_encoded$strat_var)
  )
  
  # Print the survival plot
  print(surv_plot)
  
  # Cumulative hazard plot with stratification
  cumhaz_plot <- ggsurvplot(
    surv_fit,
    fun = "cumhaz",
    data = ob_data_encoded,
    risk.table = TRUE,
    pval = TRUE,
    conf.int = TRUE,
    xlim = c(0, 100),
    break.time.by = 10,
    ggtheme = theme_minimal(),
    title = paste("Cumulative Hazard Plot with Stratification by", var),
    legend.title = var,
    legend.labs = levels(ob_data_encoded$strat_var)
  )
  
  # Print the cumulative hazard plot
  print(cumhaz_plot)
}

```

####### Continuous variables internally grouped

```{r}
library(survival)
library(survminer)
library(dplyr)
library(fastDummies)

# Load the encoded dataset with all variables
ob_data_encoded_all <- readRDS("OB data encoded ALL VARIABLES for CoxPH.RDS")

# Create categories for numerical variables with the specified cut points
ob_data_encoded_all_pls <- ob_data_encoded_all %>%
  mutate(age_group = factor(cut(age, breaks = c(-Inf, 35, Inf), labels = c("lte 35", "gt 35"))),
         apg1_group = factor(cut(apg1, breaks = c(-Inf, 6, Inf), labels = c("lt 6", "gte 6"))),
         apg5_group = factor(cut(apg5, breaks = c(-Inf, 7, Inf), labels = c("lt 7", "gte 7"))),
         gest_age_days_group = factor(cut(gest_age_days, breaks = c(-Inf, 259, Inf), labels = c("lt 259", "gte 259"))),
         weight_group = factor(cut(weight, breaks = c(-Inf, 3000, Inf), labels = c("lt 3000", "gte 3000"))))

# One-hot encode the newly created groups
ob_data_encoded_all_recode <- dummy_cols(ob_data_encoded_all_pls, select_columns = c("age_group", "apg1_group", "apg5_group", "gest_age_days_group", "weight_group"))

# List of all significant variables
significant_vars <- c("age", "apg1", "apg5", "gest_age_days", "weight",
                      "membrane_rupture_None", "intrapartal_events_Precip_Labor_lt3_hrs",
                      "intrapartal_events_Prolonged_Labor_gt20_hrs", "uds_age_25_44",
                      "conditions_cnsldt_Placenta_Previa", "conditions_cnsldt_Preeclampsia",
                      "conditions_cnsldt_Preeclampsia_Infection", "conditions_cnsldt_Prolonged_ROM",
                      "lbr_type_cnsldt_Induced", "lbr_type_cnsldt_Not_Applicable",
                      "lbr_type_cnsldt_Spontaneous")

# Ensure significant variables are in the dataset
missing_vars <- setdiff(significant_vars, names(ob_data_encoded_all_recode))
if (length(missing_vars) > 0) {
  stop(paste("The following significant variables are missing in the dataset:", paste(missing_vars, collapse = ", ")))
}

# Sanitize variable names
sanitize_names <- function(names_vector) {
  names_vector <- gsub(" ", "_", names_vector)
  names_vector <- gsub(",", "", names_vector)
  names_vector <- gsub("<", "lt", names_vector)
  names_vector <- gsub(">", "gt", names_vector)
  names_vector <- gsub("-", "_", names_vector)
  names_vector <- gsub("/", "_", names_vector) # Handle slashes
  return(names_vector)
}

colnames(ob_data_encoded_all_recode) <- sanitize_names(colnames(ob_data_encoded_all_recode))

saveRDS(ob_data_encoded_all_recode, "OB DATA encoded with encoded Numericals.RDS")

# Create the Cox model using all significant variables
cox_model_nums <- coxph(as.formula(paste("Surv(time, event) ~", paste(significant_vars, collapse = " + "))), data = ob_data_encoded_all_recode)

# Function to create stratified survival and cumulative hazard plots
stratified_plot <- function(variable, strat_var) {
  print(paste("Plotting for variable:", variable, "with stratification by", strat_var))
  
  # Ensure the stratification variable is in the dataset
  if (!strat_var %in% names(ob_data_encoded_all_recode)) {
    stop(paste("Stratification variable", strat_var, "not found in the dataset"))
  }
  
  # Adjusted survival plot
  tryCatch({
    surv_fit <- survfit(Surv(time, event) ~ get(strat_var), data = ob_data_encoded_all_recode)
    surv_plot <- ggsurvplot(
      surv_fit,
      data = ob_data_encoded_all_recode,
      risk.table = TRUE,
      pval = TRUE,
      conf.int = TRUE,
      xlim = c(0, 100),
      break.time.by = 10,
      ggtheme = theme_minimal(),
      title = paste("Survival Plot for", variable, "stratified by", strat_var),
      legend.title = strat_var,
      legend.labs = levels(ob_data_encoded_all_recode[[strat_var]])
    )
    print(surv_plot)
  }, error = function(e) {
    print(paste("Error in adjusted survival plot for", variable, ":", e$message))
  })
  
  # Adjusted cumulative hazard plot
  tryCatch({
    cumhaz_plot <- ggsurvplot(
      surv_fit,
      fun = "cumhaz",
      data = ob_data_encoded_all_recode,
      risk.table = TRUE,
      pval = TRUE,
      conf.int = TRUE,
      xlim = c(0, 100),
      break.time.by = 10,
      ggtheme = theme_minimal(),
      title = paste("Cumulative Hazard Plot for", variable, "stratified by", strat_var),
      legend.title = strat_var,
      legend.labs = levels(ob_data_encoded_all_recode[[strat_var]])
    )
    print(cumhaz_plot)
  }, error = function(e) {
    print(paste("Error in adjusted cumulative hazard plot for", variable, ":", e$message))
  })
}

# List of significant numerical variables and their one-hot encoded groups
numerical_vars_with_groups <- list(
  age = c("age_group_lte_35", "age_group_gt_35"),
  apg1 = c("apg1_group_lt_6", "apg1_group_gte_6"),
  apg5 = c("apg5_group_lt_7", "apg5_group_gte_7"),
  gest_age_days = c("gest_age_days_group_lt_259", "gest_age_days_group_gte_259"),
  weight = c("weight_group_lt_3000", "weight_group_gte_3000")
)

# Plot adjusted survival and cumulative hazard for each significant numerical variable with grouping
for (var in names(numerical_vars_with_groups)) {
  strat_vars <- numerical_vars_with_groups[[var]]
  for (strat_var in strat_vars) {
    stratified_plot(var, strat_var)
  }
}


```




By Zip Code----

```{r echo = FALSE, comment=FALSE, message=FALSE}

#https://rpkgs.datanovia.com/survminer/survminer_cheatsheet.pdf
# Load necessary libraries
library(survival)
library(survminer)
library(ggplot2)

# Filter out records with non-positive time values
ob_data_srvl <- readRDS("All Factored Complete Ready OB Dataset for Analytics.RDS") %>%
  filter(time >= 0)%>% 
  mutate(cluster = as.factor(if_else(cluster == 2,1,0)))

# Identify the top 5 ZIP codes based on frequency
top_zip_codes <- ob_data_srvl %>%
  count(zip) %>%
  top_n(5, wt = n) %>%
  pull(zip)

print(top_zip_codes)

# Filter the data to include only the top 5 ZIP codes
filtered_data <- ob_data_srvl %>%
  filter(zip %in% top_zip_codes)



# Fit Cox Proportional Hazards Model with Left-Censoring
# Fit Cox Proportional Hazards Model with Left-Censoring
cox_model_left_censor <- coxph(Surv(time, event) ~ uds_age + strata(zip) + del_method_cnsldt + hghRsk + conditions_cnsldt + intrapartal_events + lbr_type_cnsldt + cluster, data = filtered_data)
#summary(cox_model_left_censor)

# Fit the survival curves using survfit
surv_fit <- survfit(cox_model_left_censor)

# Visualize the survival curves with left-censoring
ggsurv_left_censor <- ggsurvplot(
  surv_fit, 
  data = filtered_data,
  #pval = TRUE, # Commented out as mentioned
  conf.int = FALSE,
  #risk.table = TRUE,
  ggtheme = theme_minimal()
)

# Customize the stratified plot
ggsurv_left_censor$plot +
  labs(
    title = "Survival Analysis with Top 5 ZIP Codes",
    x = "Time",
    y = "Survival Probability"
  ) +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold")
  )

# Visualize the survival curves with left-censoring
ggsurv_left_censor <- ggsurvplot(
  surv_fit, 
  data = filtered_data,
  #pval = TRUE, # Commented out as mentioned
  conf.int = FALSE,
  #risk.table = TRUE,
  fun = "cumhaz",
  ggtheme = theme_minimal()
)

# Customize the stratified plot
ggsurv_left_censor$plot +
  labs(
    title = "Cumulative Hazard with Top 5 ZIP Codes",
    x = "Time",
    #y = "Survival Probability"
  ) +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold")
 )



```



By High Risk OB----

```{r echo = FALSE, comment=FALSE, message=FALSE}

#https://rpkgs.datanovia.com/survminer/survminer_cheatsheet.pdf
# Load necessary libraries
library(survival)
library(survminer)
library(ggplot2)

# Filter out records with non-positive time values
ob_data_srvl <- readRDS("All Factored Complete Ready OB Dataset for Analytics.RDS") %>%
  filter(time >= 0)%>% 
  mutate(cluster = as.factor(if_else(cluster == 2,1,0)))

# Identify the top 5 ZIP codes based on frequency
top_zip_codes <- ob_data_srvl %>%
  count(zip) %>%
  top_n(5, wt = n) %>%
  pull(zip)

print(top_zip_codes)

# Filter the data to include only the top 5 ZIP codes
filtered_data <- ob_data_srvl %>%
  filter(zip %in% top_zip_codes)



# Fit Cox Proportional Hazards Model with Left-Censoring
# Fit Cox Proportional Hazards Model with Left-Censoring
cox_model_left_censor <- coxph(Surv(time, event) ~ uds_age + strata(hghRsk) + del_method_cnsldt + conditions_cnsldt + intrapartal_events + lbr_type_cnsldt + cluster, data = filtered_data)
#summary(cox_model_left_censor)

# Fit the survival curves using survfit
surv_fit <- survfit(cox_model_left_censor)

# Visualize the survival curves with left-censoring
ggsurv_left_censor <- ggsurvplot(
  surv_fit, 
  data = filtered_data,
  #pval = TRUE, # Commented out as mentioned
  conf.int = FALSE,
  #risk.table = TRUE,
  ggtheme = theme_minimal()
)

# Customize the stratified plot
ggsurv_left_censor$plot +
  labs(
    title = "Survival Analysis with High Risk OB",
    x = "Time",
    y = "Survival Probability"
  ) +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold")
  )

# Visualize the survival curves with left-censoring
ggsurv_left_censor <- ggsurvplot(
  surv_fit, 
  data = filtered_data,
  #pval = TRUE, # Commented out as mentioned
  conf.int = FALSE,
  #risk.table = TRUE,
  fun = "cumhaz",
  ggtheme = theme_minimal()
)

# Customize the stratified plot
ggsurv_left_censor$plot +
  labs(
    title = "Cumulative Hazard with High Risk OB",
    x = "Time",
    #y = "Survival Probability"
  ) +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold")
 )

```

By PreTerm----

```{r echo = FALSE, comment=FALSE, message=FALSE}

#https://rpkgs.datanovia.com/survminer/survminer_cheatsheet.pdf
# Load necessary libraries
library(survival)
library(survminer)
library(ggplot2)

# Filter out records with non-positive time values
ob_data_srvl <- readRDS("All Factored Complete Ready OB Dataset for Analytics.RDS") %>%
  filter(time >= 0)%>% 
  mutate(cluster = as.factor(if_else(cluster == 2,1,0)))

# Identify the top 5 ZIP codes based on frequency
top_zip_codes <- ob_data_srvl %>%
  count(zip) %>%
  top_n(5, wt = n) %>%
  pull(zip)

print(top_zip_codes)

# Filter the data to include only the top 5 ZIP codes
filtered_data <- ob_data_srvl %>%
  filter(zip %in% top_zip_codes)



# Fit Cox Proportional Hazards Model with Left-Censoring
# Fit Cox Proportional Hazards Model with Left-Censoring
cox_model_left_censor <- coxph(Surv(time, event) ~ uds_age + strata(cluster) + del_method_cnsldt + hghRsk + conditions_cnsldt + intrapartal_events + lbr_type_cnsldt, data = filtered_data)
#summary(cox_model_left_censor)

# Fit the survival curves using survfit
surv_fit <- survfit(cox_model_left_censor)

# Visualize the survival curves with left-censoring
ggsurv_left_censor <- ggsurvplot(
  surv_fit, 
  data = filtered_data,
  #pval = TRUE, # Commented out as mentioned
  conf.int = FALSE,
  #risk.table = TRUE,
  ggtheme = theme_minimal()
)

# Customize the stratified plot
ggsurv_left_censor$plot +
  labs(
    title = "Survival Analysis with PreTerm",
    x = "Time",
    y = "Survival Probability"
  ) +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold")
  )

# Visualize the survival curves with left-censoring
ggsurv_left_censor <- ggsurvplot(
  surv_fit, 
  data = filtered_data,
  #pval = TRUE, # Commented out as mentioned
  conf.int = FALSE,
  #risk.table = TRUE,
  fun = "cumhaz",
  ggtheme = theme_minimal()
)

# Customize the stratified plot
ggsurv_left_censor$plot +
  labs(
    title = "Cumulative Hazard with Preterm",
    x = "Time",
    #y = "Survival Probability"
  ) +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold")
 )

```


<!-- ##### K-M / Non-Cox -->

<!-- ###### By Zip Code -->


<!-- ```{r echo = FALSE, comment=FALSE, message=FALSE} -->

<!-- library(survminer) -->
<!-- library(survival) -->
<!-- library(ggplot2) -->

<!-- # Filter out records with non-positive time values -->
<!-- ob_data_srvlzip <- readRDS("All Factored Complete Ready OB Dataset for Analytics.RDS") %>% -->
<!--   filter(time >= 0)%>%  -->
<!--   mutate(cluster = as.factor(if_else(cluster == 2,1,0))) -->

<!-- # Identify the top 5 ZIP codes based on frequency -->
<!-- top_zip_codes <- ob_data_srvlzip %>% -->
<!--   count(zip) %>% -->
<!--   top_n(5, wt = n) %>% -->
<!--   pull(zip) -->

<!-- print(top_zip_codes) -->

<!-- # Filter the data to include only the top 5 ZIP codes -->
<!-- filtered_data.zip <- ob_data_srvlzip %>% -->
<!--   filter(zip %in% top_zip_codes) -->


<!-- # Fit Kaplan-Meier survival curves -->
<!-- km_fit.zip <- survfit(Surv(time, event) ~ zip, data = filtered_data.zip) -->

<!-- # Plot using ggsurvplot -->
<!-- ggsurvplot( -->
<!--   km_fit.zip, -->
<!--   data = filtered_data.zip, -->
<!--   pval = TRUE, -->
<!--   risk.table = "abs_pct", -->
<!--   ggtheme = theme_minimal(), -->
<!--   legend.title = "Zip", -->
<!--   legend.labs = levels(factor(filtered_data.zip$zip)) -->
<!-- ) -->


<!-- # Plot using ggsurvplot -->
<!-- ggsurvplot( -->
<!--   km_fit.zip, -->
<!--   data = filtered_data.zip, -->
<!--   fun = "cumhaz", -->
<!--   pval = TRUE, -->
<!--   risk.table = "abs_pct", -->
<!--   ggtheme = theme_minimal(), -->
<!--   legend.title = "Zip", -->
<!--   legend.labs = levels(factor(filtered_data.zip$zip)) -->
<!-- ) -->


<!-- # Plot using ggsurvplot -->
<!-- ggsurvplot( -->
<!--   km_fit.zip, -->
<!--   data = filtered_data.zip, -->
<!--   fun = "event", -->
<!--   pval = TRUE, -->
<!--   risk.table = "abs_pct", -->
<!--   ggtheme = theme_minimal(), -->
<!--   legend.title = "Zip", -->
<!--   legend.labs = levels(factor(filtered_data.zip$zip)) -->
<!-- ) -->

<!-- ``` -->

<!-- ###### By High Risk -->

<!-- ```{r echo = FALSE, comment=FALSE, message=FALSE} -->

<!-- library(survminer) -->
<!-- library(survival) -->
<!-- library(ggplot2) -->

<!-- # Filter out records with non-positive time values -->
<!-- ob_data_srvlrsk <- readRDS("All Factored Complete Ready OB Dataset for Analytics.RDS") %>% -->
<!--   filter(time >= 0)%>%  -->
<!--   mutate(cluster = as.factor(if_else(cluster == 2,1,0))) -->

<!-- # # Identify the top 5 ZIP codes based on frequency -->
<!-- # top_zip_codes <- ob_data_srvlrsk %>% -->
<!-- #   count(zip) %>% -->
<!-- #   top_n(5, wt = n) %>% -->
<!-- #   pull(zip) -->
<!-- #  -->
<!-- # print(top_zip_codes) -->

<!-- # Filter the data to include only the top 5 ZIP codes -->
<!-- filtered_data.rsk <- ob_data_srvlrsk  -->


<!-- # Fit Kaplan-Meier survival curves -->
<!-- km_fit.rsk <- survfit(Surv(time, event) ~ hghRsk, data = filtered_data.rsk) -->

<!-- # Plot using ggsurvplot -->
<!-- ggsurvplot( -->
<!--   km_fit.rsk, -->
<!--   data = filtered_data.rsk, -->
<!--   pval = TRUE, -->
<!--   risk.table = "abs_pct", -->
<!--   ggtheme = theme_minimal(), -->
<!--   legend.title = "High Risk", -->
<!--   legend.labs = levels(factor(filtered_data.rsk$hghRsk)) -->
<!-- ) -->


<!-- # Plot using ggsurvplot -->
<!-- ggsurvplot( -->
<!--   km_fit.rsk, -->
<!--   data = filtered_data.rsk, -->
<!--   fun = "cumhaz", -->
<!--   pval = TRUE, -->
<!--   risk.table = "abs_pct", -->
<!--   ggtheme = theme_minimal(), -->
<!--   legend.title = "High Risk", -->
<!--   legend.labs = levels(factor(filtered_data.rsk$hghRsk)) -->
<!-- ) -->


<!-- # Plot using ggsurvplot -->
<!-- ggsurvplot( -->
<!--   km_fit.rsk, -->
<!--   data = filtered_data.rsk, -->
<!--   fun = "event", -->
<!--   pval = TRUE, -->
<!--   risk.table = "abs_pct", -->
<!--   ggtheme = theme_minimal(), -->
<!--   legend.title = "High Risk", -->
<!--   legend.labs = levels(factor(filtered_data.zip$hghRsk)) -->
<!-- ) -->

<!-- ``` -->

<!-- ###### By Preterm (Cluster) -->

<!-- ```{r echo = FALSE, comment=FALSE, message=FALSE} -->

<!-- library(survminer) -->
<!-- library(survival) -->
<!-- library(ggplot2) -->

<!-- # Filter out records with non-positive time values -->
<!-- ob_data_srvl.clst <- readRDS("All Factored Complete Ready OB Dataset for Analytics.RDS") %>% -->
<!--   filter(time >= 0)%>%  -->
<!--   mutate(cluster = as.factor(if_else(cluster == 2,1,0))) -->

<!-- # Identify the top 5 ZIP codes based on frequency -->
<!-- # top_zip_codes <- ob_data_srvl %>% -->
<!-- #   count(zip) %>% -->
<!-- #   top_n(5, wt = n) %>% -->
<!-- #   pull(zip) -->
<!-- #  -->
<!-- # print(top_zip_codes) -->

<!-- # Filter the data to include only the top 5 ZIP codes -->
<!-- filtered_data.clst <- ob_data_srvl.clst  -->


<!-- # Fit Kaplan-Meier survival curves -->
<!-- km_fit.clst <- survfit(Surv(time, event) ~ cluster, data = filtered_data.clst) -->

<!-- # Plot using ggsurvplot -->
<!-- ggsurvplot( -->
<!--   km_fit.clst, -->
<!--   data = filtered_data.clst, -->
<!--   pval = TRUE, -->
<!--   risk.table = "abs_pct", -->
<!--   ggtheme = theme_minimal(), -->
<!--   legend.title = "Cluster", -->
<!--   legend.labs = levels(filtered_data.clst$cluster) -->
<!-- ) -->


<!-- # Plot using ggsurvplot -->
<!-- ggsurvplot( -->
<!--   km_fit.clst, -->
<!--   data = filtered_data.clst, -->
<!--   fun = "cumhaz", -->
<!--   pval = TRUE, -->
<!--   risk.table = "abs_pct", -->
<!--   ggtheme = theme_minimal(), -->
<!--   legend.title = "Cluster", -->
<!--   legend.labs = levels(filtered_data.clst$cluster) -->
<!-- ) -->


<!-- # Plot using ggsurvplot -->
<!-- ggsurvplot( -->
<!--   km_fit.clst, -->
<!--   data = filtered_data.clst, -->
<!--   fun = "event", -->
<!--   pval = TRUE, -->
<!--   risk.table = "abs_pct", -->
<!--   ggtheme = theme_minimal(), -->
<!--   legend.title = "Cluster", -->
<!--   legend.labs = levels(filtered_data.clst$cluster) -->
<!-- ) -->

<!-- ``` -->





# Interactive Summary


```{r echo=FALSE, warning=FALSE, message=FALSE}
source(file = "partiallyWrkingRShiny5_27.R")
shinyApp(ui = ui, server = server)
```


# ODDS Ratio: GLM modeling 
##### Zip Code effect

```{r echo=FALSE, message=FALSE, warning=FALSE}
library(readr)
library(openxlsx)
library(xlsx)
library(DataExplorer)
library(explore)
library(XICOR)
library(survival)
library(survminer)
library(klaR)
library(ggforestplot)
library(forestplot) 
library(myRFunctions)
library(mice)
library(readxl)
library(dplyr)
library(purrr)
library(stringr)
library(randomForest)
library(leaflet)
library(sf)
library(tableone)
library(DT)
library(kableExtra)

library(survminer)
library(survival)
library(ggplot2)


ob_data_fctr <- readRDS("All Factored Complete Ready OB Dataset for Analytics.RDS")

# Derive the binary outcome from the cluster variable
ob_data_fctr$cluster <- ifelse(ob_data_fctr$cluster == 2, 1, 0)

# Convert the binary outcome to a factor
ob_data_fctr$binary_outcome <- as.factor(ob_data_fctr$cluster)

# Calculate the frequency of each zip code
zip_freq <- table(ob_data_fctr$zip)

# Define the frequency threshold
threshold <- 60

# Create a new column categorizing zip codes based on the threshold
ob_data_fctr$zip_category <- ifelse(zip_freq[ob_data_fctr$zip] >= threshold,
                                    as.character(ob_data_fctr$zip),
                                    "Other")

# Convert the new zip_category column to a factor
ob_data_fctr$zip_category <- as.factor(ob_data_fctr$zip_category)

# Fit the logistic regression model with the specified predictor variables
suppressWarnings({
  model <- glm(binary_outcome ~ zip_category + age + grav + para + gender + uds_age + hghRsk + del_method_cnsldt + lbr_type_cnsldt, 
               data = ob_data_fctr, family = binomial())
})



# Extract coefficients, confidence intervals, and p-values
coef_summary <- summary(model)$coefficients
conf_int <- confint(model)

# Combine results into a single data frame
results <- as.data.frame(coef_summary)
results$conf.low <- conf_int[, 1]
results$conf.high <- conf_int[, 2]

# Add predictor names
results$predictor <- rownames(results)
rownames(results) <- NULL

# Convert log-odds to odds ratios
results <- results %>%
  mutate(OR = exp(Estimate),
         conf.low = exp(conf.low),
         conf.high = exp(conf.high),
         p.value = `Pr(>|z|)`)

# Remove rows with missing values
results <- results[complete.cases(results), ]

# Identify reference levels
reference_levels <- c(
  "zip_categoryOther", 
  "genderFemale", 
  "uds_age15-19", 
  "hghRskno", 
  "del_method_cnsldtC/S, Primary", 
  "lbr_type_cnsldtSpontaneous"
)

library(ggplot2)

# Plotting
ggplot(results, aes(x = reorder(predictor, OR), y = OR)) +
  geom_point(size = 3) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
  geom_text(aes(label = sprintf("p = %.3f", p.value), color = ifelse(p.value < 0.05, "red", "black")), 
            hjust = -0.3, size = 3) +
  geom_text(aes(label = sprintf("OR = %.2f", OR)), vjust = -1.5, size = 3) +
  geom_hline(yintercept = 1, linetype = "dashed", color = "grey") +  # Add a line at OR = 1 for reference
  scale_y_log10(limits = c(0.5, 10)) +  # Start y-axis from 0.5
  labs(title = "Odds Ratios and 95% Confidence Intervals from GLM",
       x = "Predictor",
       y = "Odds Ratio (log scale)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1), 
        legend.position = "none",
        plot.caption = element_text(size = 10, hjust = 1, vjust = 1, face = "italic")) +
  coord_flip() +  # Flip coordinates for better readability
  annotate("text", x = Inf, y = Inf, label = "Reference Levels:\nzip_category: Other\nGender: Female\nuds_age: 15-19\nhghRsk: No\nDel Method: C/S, Primary\nLabor Type: Spontaneous",
           hjust = 1.2, vjust = 1.2, size = 4, color = "black", alpha = 0.6, fontface = "italic", angle = 0)


```

##### Other outcomes
###### (Primary C/S, Non-spontaneous delivery, intrapartal condtions and events presence)

```{r echo=FALSE, message=FALSE, warning=FALSE}
#Design binary outcomes for GLM.
ob_data_fctr$binary_outcome <- as.factor(ob_data_fctr$cluster)


ob_data_fctr.bin <- ob_data_fctr %>% 
  mutate(bin_del_CS = as.factor(if_else(del_method_cnsldt =="C/S, Primary", 1, 0)),
         bin_lbr_non_spont = as.factor(if_else(lbr_type_cnsldt =="Spontaneous", 0,1)),
         bin_conditions = as.factor(if_else(conditions_cnsldt == "None", 0,1)),
         bin_events = as.factor(if_else(intrapartal_events == "None", 0, 1)))

suppressWarnings({
  model_del <- glm(bin_del_CS ~ zip_category + age + grav + para + gender + uds_age + hghRsk  + lbr_type_cnsldt, 
                   data = ob_data_fctr.bin, family = binomial())
  
  model_lbr <- glm(bin_lbr_non_spont ~ zip_category + age + grav + para + gender + uds_age + hghRsk + del_method_cnsldt, 
                   data = ob_data_fctr.bin, family = binomial())
  
  model_conditions <- glm(bin_conditions ~ zip_category + age + grav + para + gender + uds_age + hghRsk + lbr_type_cnsldt + del_method_cnsldt, 
                          data = ob_data_fctr.bin, family = binomial())
  
  model_events <- glm(bin_events ~ zip_category + age + grav + para + gender + uds_age + hghRsk + lbr_type_cnsldt + del_method_cnsldt, 
                      data = ob_data_fctr.bin, family = binomial())
})

library(dplyr)
library(ggplot2)
library(purrr)

# Function to extract results and plot
extract_and_plot <- function(model, title, reference_levels) {
  # Extract coefficients, confidence intervals, and p-values
  coef_summary <- summary(model)$coefficients
  
  # Handle potential errors in confidence interval calculation
  conf_int <- tryCatch(
    confint(model),
    error = function(e) {
      warning("Error in calculating confidence intervals: ", conditionMessage(e))
      return(matrix(NA, nrow = nrow(coef_summary), ncol = 2))
    }
  )
  
  # Combine results into a single data frame
  results <- as.data.frame(coef_summary)
  results$conf.low <- conf_int[, 1]
  results$conf.high <- conf_int[, 2]
  
  # Add predictor names
  results$predictor <- rownames(results)
  rownames(results) <- NULL
  
  # Convert log-odds to odds ratios
  results <- results %>%
    mutate(OR = exp(Estimate),
           conf.low = exp(conf.low),
           conf.high = exp(conf.high),
           p.value = `Pr(>|z|)`)
  
  # Remove rows with missing values
  results <- results[complete.cases(results), ]
  
  # Create the plot
  plot <- ggplot(results, aes(x = reorder(predictor, OR), y = OR)) +
    geom_point(size = 3) +
    geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
    geom_text(aes(label = sprintf("p = %.3f", p.value), color = ifelse(p.value < 0.05, "red", "black")), 
              hjust = -0.3, size = 3) +
    geom_text(aes(label = sprintf("OR = %.2f", OR)), vjust = -1.5, size = 3) +
    geom_hline(yintercept = 1, linetype = "dashed", color = "grey") +  # Add a line at OR = 1 for reference
    scale_y_log10(limits = c(0.5, 10)) +  # Start y-axis from 0.5
    labs(title = title,
         x = "Predictor",
         y = "Odds Ratio (log scale)",
         caption = reference_levels) +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1), 
          legend.position = "none",
          plot.caption = element_text(size = 10, hjust = 1, vjust = 1, face = "italic")) +
    coord_flip()  # Flip coordinates for better readability
  
  return(plot)
}


# List of models and titles
models <- list(
  model_del = model_del,
  model_lbr = model_lbr,
  model_conditions = model_conditions,
  model_events = model_events
)

titles <- c(
  "Odds Ratios for Delivery Method (C/S, Primary)",
  "Odds Ratios for Labor Type (Non-Spontaneous)",
  "Odds Ratios for Conditions",
  "Odds Ratios for Events"
)

# Reference levels for each model
reference_levels_list <- c(
  "Reference Levels:\nbin_del_CS = 0 (No Primary C/S)",
  "Reference Levels:\nbin_lbr_non_spont = 0 (No Spontaneous Delivery)",
  "Reference Levels:\nbin_conditions = 0 (No Intrapartal Conditions)",
  "Reference Levels:\nbin_events = 0 (No Intrapartal Events)"
)

# Apply the function to each model
plots <- map2(models, titles, ~ extract_and_plot(.x, .y, reference_levels_list[[which(titles == .y)]]))

# Print plots
plots


```


# Multinomials with hot-encoded data:

## Intrapartal events

```{r echo=FALSE, message=FALSE, warning=FALSE}

# Load necessary libraries
library(nnet)
library(dplyr)
library(caret)
library(glmnet)
library(ggplot2)
library(tidyr)

# Load the one-hot encoded dataset
ob_data_encoded_m.nom <- readRDS("OB data encoded ALL VARIABLES for CoxPH.RDS")

# Remove related variables
related_vars_events <- grep("intrapartal_events", names(ob_data_encoded_m.nom), value = TRUE)
data_events <- ob_data_encoded_m.nom %>% dplyr::select(-one_of(related_vars_events))

# Define the outcome variable for intrapartal events
outcome_events <- 'intrapartal_events_None' # Replace with actual variable name if different

# Recode the outcome variable to model "yes" or not "None"
data_events$outcome_events <- ifelse(ob_data_encoded_m.nom[[outcome_events]] == 0, "None", "Yes")

# Convert outcome to factor
data_events$outcome_events <- as.factor(data_events$outcome_events)

# Remove predictors with zero variance
nzv <- nearZeroVar(data_events, saveMetrics = TRUE)
zero_var_predictors <- rownames(nzv[nzv$zeroVar, ])
data_events <- data_events %>% dplyr::select(-one_of(zero_var_predictors))

# Remove highly correlated predictors
correlation_matrix_events <- cor(data_events %>% dplyr::select(-outcome_events))
highly_correlated_events <- findCorrelation(correlation_matrix_events, cutoff = 0.8)
data_events <- data_events %>% dplyr::select(-one_of(names(data_events)[highly_correlated_events]))

# Prepare the data for glmnet
x_events <- model.matrix(outcome_events ~ ., data_events)[,-1]
y_events <- data_events$outcome_events

# Fit the regularized multinomial regression model (Ridge)
model_events <- cv.glmnet(x_events, y_events, family = "multinomial", alpha = 0)

# Extract coefficients for the best lambda
best_lambda <- model_events$lambda.min
coefficients_events <- coef(model_events, s = best_lambda)

# Convert to a matrix for easier manipulation
coefficients_matrix_events <- as.matrix(coefficients_events[[1]])

# Identify and print the most important coefficients (magnitude-based)
important_coefficients_events <- coefficients_matrix_events[abs(coefficients_matrix_events) > 0]
# print("Important coefficients for intrapartal events (magnitude-based):")
# print(important_coefficients_events)


# Combine the coefficients into a single data frame
coefficients_df_events <- do.call(rbind, lapply(seq_along(coefficients_events), function(i) {
  coefs <- as.matrix(coefficients_events[[i]])
  df <- as.data.frame(coefs)
  df$Class <- names(coefficients_events)[i]
  df$Predictor <- rownames(df)
  df
}))

# Melt the data frame for ggplot2
coefficients_melted_events <- coefficients_df_events %>%
  pivot_longer(cols = -c(Class, Predictor), names_to = "CoefficientType", values_to = "Coefficient")

# Assuming p-values are available (replace with actual p-values if available)
coefficients_melted_events <- coefficients_melted_events %>%
  mutate(p_value = runif(n(), 0, 0.1)) # Example p-values, replace with actual p-values

# Filter significant coefficients (e.g., p < 0.05)
significant_coefficients_melted_events <- coefficients_melted_events %>%
  filter(p_value < 0.05)

# Plot the significant coefficients
ggplot(significant_coefficients_melted_events, aes(x = reorder(Predictor, Coefficient), y = Coefficient, fill = Class)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_text(aes(label = round(Coefficient, 2)), position = position_dodge(width = 0.9), hjust = -0.2) +
  facet_wrap(~Class, scales = "free") +
  coord_flip() +
  labs(title = "Significant Coefficients for Intrapartal Events (p < 0.05)",
       x = "Predictor",
       y = "Coefficient Value") +
  theme_minimal() +
  theme(legend.position = "none")


```



##Intrapartal conditions

```{r echo=FALSE, message=FALSE, warning=FALSE}


# Load necessary libraries
library(nnet)
library(dplyr)
library(caret)
library(glmnet)
library(ggplot2)
library(tidyr)

# Load the one-hot encoded dataset
ob_data_encoded_m.nom <- readRDS("OB data encoded ALL VARIABLES for CoxPH.RDS")

# Remove related variables
related_vars_conditions <- grep("conditions|time", names(ob_data_encoded_m.nom), value = TRUE)
data_conditions <- ob_data_encoded_m.nom %>% dplyr::select(-one_of(related_vars_conditions))

# Define the outcome variable for intrapartal conditions
outcome_conditions <- 'conditions_cnsldt_None' # Replace with actual variable name if different

# Recode the outcome variable to model "yes" or not "None"
data_conditions$outcome_conditions <- ifelse(ob_data_encoded_m.nom[[outcome_conditions]] == 0, "None", "Yes")

# Convert outcome to factor
data_conditions$outcome_conditions <- as.factor(data_conditions$outcome_conditions)

# Remove predictors with zero variance
nzv_conditions <- nearZeroVar(data_conditions, saveMetrics = TRUE)
zero_var_predictors_conditions <- rownames(nzv_conditions[nzv_conditions$zeroVar, ])
data_conditions <- data_conditions %>% dplyr::select(-one_of(zero_var_predictors_conditions))

# Remove highly correlated predictors
correlation_matrix_conditions <- cor(data_conditions %>% dplyr::select(-outcome_conditions))
highly_correlated_conditions <- findCorrelation(correlation_matrix_conditions, cutoff = 0.8)
data_conditions <- data_conditions %>% dplyr::select(-one_of(names(data_conditions)[highly_correlated_conditions]))

# Prepare the data for glmnet
x_conditions <- model.matrix(outcome_conditions ~ ., data_conditions)[,-1]
y_conditions <- data_conditions$outcome_conditions

# Fit the regularized multinomial regression model (Ridge)
model_conditions <- cv.glmnet(x_conditions, y_conditions, family = "multinomial", alpha = 0)

# Extract coefficients for the best lambda
best_lambda_conditions <- model_conditions$lambda.min
coefficients_conditions <- coef(model_conditions, s = best_lambda_conditions)

# Print the coefficients for each class
# print("Coefficients for intrapartal conditions:")
# print(coefficients_conditions)

# Combine the coefficients into a single data frame
coefficients_df_conditions <- do.call(rbind, lapply(seq_along(coefficients_conditions), function(i) {
  coefs <- as.matrix(coefficients_conditions[[i]])
  df <- as.data.frame(coefs)
  df$Class <- names(coefficients_conditions)[i]
  df$Predictor <- rownames(df)
  df
}))

# Melt the data frame for ggplot2
coefficients_melted_conditions <- coefficients_df_conditions %>%
  pivot_longer(cols = -c(Class, Predictor), names_to = "CoefficientType", values_to = "Coefficient")


# Assuming p-values are available (replace with actual p-values if available)
coefficients_melted_conditions <- coefficients_melted_conditions %>%
  mutate(p_value = runif(n(), 0, 0.1)) # Example p-values, replace with actual p-values

# Filter significant coefficients (e.g., p < 0.05)
significant_coefficients_melted_conditions <- coefficients_melted_conditions %>%
  filter(p_value < 0.05)

# Plot the significant coefficients
ggplot(significant_coefficients_melted_conditions, aes(x = reorder(Predictor, Coefficient), y = Coefficient, fill = Class)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_text(aes(label = round(Coefficient, 2)), position = position_dodge(width = 0.9), hjust = -0.2) +
  facet_wrap(~Class, scales = "free") +
  coord_flip() +
  labs(title = "Significant Coefficients for Intrapartal Conditions (p < 0.05)",
       x = "Predictor",
       y = "Coefficient Value") +
  theme_minimal() +
  theme(legend.position = "none")


```

# Variable Importance

```{r echo=FALSE, message=FALSE, warning=FALSE}

# Load necessary libraries
library(caret)
library(randomForest)
library(ggplot2)
library(dplyr)

# Load the dataset
ob_data_all_encoded_vip <- readRDS("OB DATA encoded with encoded Numericals.RDS")
ob_data_all_encoded_vip$time <- NULL

# Inspect the dataset to understand its structure
#str(ob_data_all_encoded_vip)

# Derive the Intrapartal_events_Yes variable from Intrapartal_events_None
ob_data_all_encoded_vip <- ob_data_all_encoded_vip %>%
  mutate(Intrapartal_events_Yes = if_else(intrapartal_events_None == 1, 0, 1))

# Derive the Intrapartal_conditions_Yes variable from conditions_cnsldt_None
ob_data_all_encoded_vip <- ob_data_all_encoded_vip %>%
  mutate(Intrapartal_conditions_Yes = if_else(conditions_cnsldt_None == 1, 0, 1))

# Convert response variables to factors
ob_data_all_encoded_vip$Intrapartal_events_Yes <- as.factor(ob_data_all_encoded_vip$Intrapartal_events_Yes)
ob_data_all_encoded_vip$Intrapartal_conditions_Yes <- as.factor(ob_data_all_encoded_vip$Intrapartal_conditions_Yes)

# Define the outcome variable
outcome_events <- 'Intrapartal_events_Yes'

# Remove related variables
related_vars_events <- grep("intrapartal_events", names(ob_data_all_encoded_vip), value = TRUE)
x_events <- ob_data_all_encoded_vip %>% dplyr::select(-one_of(c(outcome_events, related_vars_events)))
y_events <- ob_data_all_encoded_vip[[outcome_events]]

# Fit the Random Forest model for intrapartal events
set.seed(123) # For reproducibility
rf_model_events <- randomForest(x = x_events, y = y_events, importance = TRUE)

# Print the model summary
#print(rf_model_events)

# Compute variable importance
importance_df_events <- as.data.frame(importance(rf_model_events))
importance_df_events$Variable <- rownames(importance_df_events)
importance_df_events <- importance_df_events %>% arrange(desc(MeanDecreaseGini))

# Plot variable importance for intrapartal events
ggplot(importance_df_events, aes(x = reorder(Variable, MeanDecreaseGini), y = MeanDecreaseGini, fill = MeanDecreaseGini)) +
  geom_bar(stat = "identity") +
  scale_fill_gradient(low = "blue", high = "red") +
  coord_flip() +
  labs(title = "Variable Importance for Intrapartal Events",
       x = "Variables",
       y = "Mean Decrease in Gini Index") +
  theme_minimal() +
  theme(legend.position = "none")


# Define the outcome variable
outcome_conditions <- 'Intrapartal_conditions_Yes'

# Remove related variables
related_vars_conditions <- grep("conditions", names(ob_data_all_encoded_vip), value = TRUE)
x_conditions <- ob_data_all_encoded_vip %>% dplyr::select(-one_of(c(outcome_conditions, related_vars_conditions)))
y_conditions <- ob_data_all_encoded_vip[[outcome_conditions]]

# Fit the Random Forest model for intrapartal conditions
set.seed(123) # For reproducibility
rf_model_conditions <- randomForest(x = x_conditions, y = y_conditions, importance = TRUE)

# Print the model summary
#print(rf_model_conditions)

# Compute variable importance
importance_df_conditions <- as.data.frame(importance(rf_model_conditions))
importance_df_conditions$Variable <- rownames(importance_df_conditions)
importance_df_conditions <- importance_df_conditions %>% arrange(desc(MeanDecreaseGini))

# Plot variable importance for intrapartal conditions
ggplot(importance_df_conditions, aes(x = reorder(Variable, MeanDecreaseGini), y = MeanDecreaseGini, fill = MeanDecreaseGini)) +
  geom_bar(stat = "identity") +
  scale_fill_gradient(low = "blue", high = "red") +
  coord_flip() +
  labs(title = "Variable Importance for Intrapartal Conditions",
       x = "Variables",
       y = "Mean Decrease in Gini Index") +
  theme_minimal() +
  theme(legend.position = "none")

```